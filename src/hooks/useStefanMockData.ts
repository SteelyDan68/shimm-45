import { useState, useEffect } from 'react';
import { useAuth } from '@/providers/UnifiedAuthProvider';
import { StefanInteraction } from '@/types/welcomeAssessment';

// Mock Stefan interactions f칬r n칛r AI:n inte fungerar
export const useStefanMockData = () => {
  const { user } = useAuth();
  const [mockInteractions, setMockInteractions] = useState<StefanInteraction[]>([]);

  useEffect(() => {
    if (!user) return;

    // Skapa realistiska mock interactions baserat p친 tid och anv칛ndaraktivitet
    const now = new Date();
    const mockData: StefanInteraction[] = [
      {
        id: 'mock-1',
        user_id: user.id,
        interaction_type: 'proactive',
        stefan_persona: 'mentor',
        context_data: {
          page: '/ai-coaching',
          time_of_day: now.getHours()
        },
        message_content: getContextualMessage(),
        user_response: null,
        created_at: new Date(now.getTime() - 10 * 60 * 1000).toISOString() // 10 min sedan
      }
    ];

    setMockInteractions(mockData);
  }, [user]);

  const getContextualMessage = (): string => {
    const hour = new Date().getHours();
    const day = new Date().getDay();
    
    // Tid-baserade meddelanden
    if (hour < 10) {
      return "God morgon! Jag s친g att du 칛r ig친ng tidigt idag. Perfekt tid f칬r att s칛tta intentioner f칬r dagen. Vad vill du fokusera p친?";
    } else if (hour < 14) {
      return "Hej! Hur g친r det med dagens uppgifter? Jag m칛rkte att du har n친gra viktiga saker p친 g친ng. Beh칬ver du hj칛lp med prioritering?";
    } else if (hour < 18) {
      return "Eftermiddagen 칛r h칛r! En bra tid f칬r reflektion. Hur k칛nns det med framstegen idag? N친got du vill diskutera?";
    } else {
      return "God kv칛ll! Tiden f칬r att blicka tillbaka p친 dagen. Vad har fungerat bra idag och vad kan vi f칬rb칛ttra imorgon?";
    }
  };

  const addMockInteraction = (type: string, context: string, message?: string) => {
    const newInteraction: StefanInteraction = {
      id: `mock-${Date.now()}`,
      user_id: user?.id || '',
      interaction_type: type,
      stefan_persona: 'mentor',
      context_data: { context, timestamp: new Date().toISOString() },
      message_content: message || getContextualResponseForType(type, context),
      user_response: null,
      created_at: new Date().toISOString()
    };

    setMockInteractions(prev => [newInteraction, ...prev.slice(0, 9)]);
    return newInteraction;
  };

  const getContextualResponseForType = (type: string, context: string): string => {
    const responses: Record<string, Record<string, string[]>> = {
      'contextual_help': {
        'task_prioritization': [
          "L친t oss titta p친 dina uppgifter! Jag f칬resl친r att vi b칬rjar med det som har st칬rst p친verkan men kr칛ver minst energi. Vad tycker du?",
          "Smart att fr친ga om prioritering! Baserat p친 dina m친l skulle jag s칛ga: b칬rja med det som r칬r dig fram친t mot din vision."
        ],
        'struggling_tasks': [
          "Jag ser att n친gra uppgifter har k칬rt fast. Det h칛nder oss alla! Ska vi bryta ner dem i mindre bitar?",
          "Fastnade uppgifter 칛r ofta ett tecken p친 att vi beh칬ver ett nytt perspektiv. Vill du brainstorma alternativa v칛gar?"
        ],
        'weekly_planning': [
          "Perfekt timing f칬r veckoplanering! L친t oss balansera dina stora m친l med vardagens realiteter. Vad 칛r viktigast denna vecka?",
          "Veckoplanering 칛r en konstform! Jag hj칛lper dig hitta r칛tt rytm mellan fokus och flexibilitet."
        ]
      },
      'motivation': {
        'task_motivation': [
          "Du har kommit s친 l친ngt redan! Varje steg du tar nu bygger p친 allt det h친rda arbete du redan lagt ner. Forts칛tt!",
          "Motivation kommer och g친r, men dina vanor h친ller dig p친 r칛tt sp친r. Du klarar det h칛r!"
        ],
        'general': [
          "Du g칬r framsteg varje dag, 칛ven n칛r det inte k칛nns s친. Jag ser din utveckling och den 칛r imponerande!",
          "Kom ih친g varf칬r du b칬rjade. Den personen du blir p친 andra sidan av detta kommer tacka dig f칬r att du inte gav upp."
        ]
      },
      'celebration': {
        'milestone_achievement': [
          "WOW! Det h칛r f칬rtj칛nar vi att fira ordentligt! 游꿀 Du har verkligen visat vad du g친r f칬r.",
          "Fantastiskt! Denna framg친ng 칛r resultatet av ditt h친rda arbete och engagemang. Var stolt!"
        ]
      }
    };

    const categoryResponses = responses[type]?.[context] || responses[type]?.['general'] || [
      "Tack f칬r att du kontaktar mig! Jag 칛r h칛r f칬r att st칬tta dig p친 din resa fram친t."
    ];

    return categoryResponses[Math.floor(Math.random() * categoryResponses.length)];
  };

  return {
    mockInteractions,
    addMockInteraction,
    isUsingMockData: true
  };
};