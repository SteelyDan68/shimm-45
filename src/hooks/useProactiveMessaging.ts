import { useState, useCallback, useEffect } from 'react';
import { useAuth } from '@/providers/UnifiedAuthProvider';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useContextEngine } from './useContextEngine';

/**
 * ü§ñ PROACTIVE MESSAGING ENGINE
 * Stefan kan nu autonomt skicka meddelanden baserat p√• anv√§ndarens beteende
 * UPPDATERAD: Anv√§nder toast notifications ist√§llet f√∂r konversationssystem
 */

interface ProactiveMessage {
  id: string;
  trigger_type: string;
  content: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  sent_at?: string;
  user_responded?: boolean;
}

export const useProactiveMessaging = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const { currentSessionState, insights } = useContextEngine();
  const [pendingMessages, setPendingMessages] = useState<ProactiveMessage[]>([]);

  // Skicka proaktivt meddelande fr√•n Stefan (utan att skapa konversation)
  const sendProactiveMessage = useCallback(async (
    triggerType: string,
    message: string,
    priority: 'low' | 'medium' | 'high' = 'medium'
  ) => {
    if (!user) return;

    console.log('ü§ñ Stefan sending proactive message:', {
      triggerType,
      priority,
      message: message.substring(0, 50) + '...'
    });

    try {
      // Ist√§llet f√∂r att skapa konversation, lagra meddelandet som proactive intervention
      const { error } = await supabase
        .from('proactive_interventions')
        .insert({
          user_id: user.id,
          trigger_condition: triggerType,
          intervention_type: 'chat_message',
          content: message,
          delivery_method: 'widget',
          context_snapshot: {
            trigger_type: triggerType,
            priority,
            timestamp: new Date().toISOString()
          }
        });

      if (error) {
        console.error('‚ùå Error storing proactive message:', error);
        throw error;
      }

      console.log('‚úÖ Stefan proactive message stored successfully');
      
      // K√∂r toast notification ist√§llet f√∂r konversation
      toast({
        title: "üí¨ Stefan s√§ger:",
        description: message,
        duration: 5000,
      });

    } catch (error) {
      console.error('Failed to send Stefan proactive message:', error);
      toast({
        title: "Stefan AI",
        description: "Stefan f√∂rs√∂ker n√• dig men har sv√•righeter med anslutningen.",
        variant: "destructive",
      });
    }
  }, [user, toast]);

  // F√∂rb√§ttra meddelande med Stefans personlighet
  const enhanceMessageWithPersonality = async (content: string, triggerType: string): Promise<string> => {
    const personalityPrefixes = {
      inactivity_check: "Hej! Jag m√§rkte att du har varit borta ett tag. ",
      task_reminder: "üéØ Hej igen! Jag ville p√•minna dig om ",
      progress_celebration: "üéâ Fantastiskt! Jag s√•g att du ",
      struggling_support: "üí™ Hej! Jag m√§rker att du kanske beh√∂ver lite extra st√∂d. ",
      learning_opportunity: "üí° Hej! Jag hittade n√•got som kan intressera dig: ",
      weekly_checkin: "üìä Hej! Dags f√∂r v√•r veckovis check-in. ",
      achievement_unlock: "üèÜ Grattis! Du har just uppn√•tt ",
      motivation_boost: "üåü Hej! Jag ville bara s√§ga att "
    };

    const prefix = personalityPrefixes[triggerType as keyof typeof personalityPrefixes] || "Hej! ";
    const signature = "\n\n// Stefan AI üß†";

    return `${prefix}${content}${signature}`;
  };

  // Analysera anv√§ndarens beteende och skicka proaktiva meddelanden
  const analyzeAndSendProactiveMessages = useCallback(async () => {
    if (!user || !currentSessionState) return;

    try {
      console.log('ü§ñ Stefan analyzing user behavior for proactive messaging...');

      const now = new Date();
      const twoHoursAgo = new Date(now.getTime() - 2 * 60 * 60 * 1000);

      // 1. INAKTIVITETS-CHECK (anv√§ndarens har varit inaktiv > 2 timmar)
      if (currentSessionState.last_active_at && 
          new Date(currentSessionState.last_active_at) < twoHoursAgo &&
          currentSessionState.total_time_spent_minutes > 10) {
        
        await sendProactiveMessage(
          'inactivity_check',
          'Hur g√•r det med din utvecklingsresa? Jag finns h√§r om du beh√∂ver st√∂d eller vill prata om dina m√•l! üòä',
          'low'
        );
      }

      // 2. STRUGGELING SUPPORT (m√•nga abandoned tasks)
      const recentInsights = insights.filter(insight => 
        new Date(insight.generated_at) > twoHoursAgo &&
        insight.insight_type === 'struggling_pattern'
      );

      if (recentInsights.length > 0) {
        await sendProactiveMessage(
          'struggling_support',
          'Jag ser att du arbetar h√•rt med dina m√•l. Kom ih√•g att sm√• steg fram√•t √§r viktiga framsteg! Vill du prata om hur jag kan st√∂tta dig b√§ttre?',
          'medium'
        );
      }

      // 3. PROGRESS CELEBRATION (m√•nga completed tasks)
      if (currentSessionState.daily_completions > 3) {
        await sendProactiveMessage(
          'progress_celebration',
          `har genomf√∂rt ${currentSessionState.daily_completions} aktiviteter idag! Du √§r verkligen p√• r√§tt sp√•r. Forts√§tt s√• h√§r! üöÄ`,
          'medium'
        );
      }

      // 4. LEARNING OPPORTUNITY (baserat p√• anv√§ndarens aktuella fokusomr√•den)
      const lowScoreAreas = Object.entries(currentSessionState.session_data || {})
        .filter(([key, value]) => key.includes('_score') && (value as number) < 5)
        .map(([key]) => key.replace('_score', ''));

      if (lowScoreAreas.length > 0) {
        const area = lowScoreAreas[0];
        await sendProactiveMessage(
          'learning_opportunity',
          `Jag har n√•gra konkreta tips f√∂r att utveckla din ${area}. Vill du att vi g√•r igenom dem tillsammans?`,
          'low'
        );
      }

      // 5. VECKOVIS CHECK-IN (varje m√•ndag)
      const isMonday = now.getDay() === 1;
      const isMorning = now.getHours() >= 8 && now.getHours() <= 10;
      
      if (isMonday && isMorning) {
        await sendProactiveMessage(
          'weekly_checkin',
          'Hur k√§nns det inf√∂r en ny vecka? L√•t oss planera f√∂r framg√•ng! Vill du att jag hj√§lper dig s√§tta upp veckans m√•l?',
          'medium'
        );
      }

      console.log('‚úÖ Stefan completed proactive message analysis');

    } catch (error) {
      console.error('Error in proactive messaging analysis:', error);
    }
  }, [user, currentSessionState, insights, sendProactiveMessage]);

  // Skicka motivationsmeddelande baserat p√• specifik trigger
  const sendMotivationalMessage = useCallback(async (context: string) => {
    const motivationalMessages = {
      assessment_completed: "Du har precis genomf√∂rt en bed√∂mning! Det kr√§vs mod att vara √§rlig med sig sj√§lv. Jag √§r stolt √∂ver dig! üí™",
      streak_broken: "Ingen fara att du br√∂t din streak! Det viktiga √§r att du √§r h√§r nu. L√•t oss b√∂rja om tillsammans! üåü",
      goal_achieved: "WOW! Du har uppn√•tt ett viktigt m√•l! Ta en paus och fira detta. Du f√∂rtj√§nar det! üéâ",
      stuck_too_long: "Jag m√§rker att du har fastnat p√• samma st√§lle ett tag. Ibland beh√∂ver vi bara en ny vinkel. Vill du att jag hj√§lper till? ü§î",
      progress_milestone: "Du har kommit s√• l√•ngt p√• din resa! Titta tillbaka p√• var du startade - vilken fantastisk utveckling! üìà",
      motivation_boost: "Du g√∂r ett fantastiskt jobb med din utveckling! Jag ser dina framsteg och √§r imponerad! üåü",
      learning_opportunity: "Jag hittade n√•got som kan hj√§lpa dig utvecklas √§nnu mer. Vill du ta en titt? üí°"
    };

    const message = motivationalMessages[context as keyof typeof motivationalMessages] || 
      "Jag t√§nker p√• dig och din utvecklingsresa! Du g√∂r ett fantastiskt jobb! üíô";

    await sendProactiveMessage('motivation_boost', message, 'medium');
  }, [sendProactiveMessage]);

  // Auto-trigger baserat p√• context engine events
  useEffect(() => {
    const triggerInterval = setInterval(analyzeAndSendProactiveMessages, 30 * 60 * 1000); // Var 30:e minut
    
    // Initial check efter 2 minuter
    const initialTimeout = setTimeout(analyzeAndSendProactiveMessages, 2 * 60 * 1000);

    return () => {
      clearInterval(triggerInterval);
      clearTimeout(initialTimeout);
    };
  }, [analyzeAndSendProactiveMessages]);

  return {
    sendProactiveMessage,
    sendMotivationalMessage,
    pendingMessages,
    analyzeAndSendProactiveMessages
  };
};