import { useState, useCallback, useEffect } from 'react';
import { useAuth } from '@/providers/UnifiedAuthProvider';
import { useContextEngine } from '@/hooks/useContextEngine';
import { useAdaptiveLearning } from '@/hooks/useAdaptiveLearning';
import { supabase } from '@/integrations/supabase/client';

/**
 * 游눙 EMOTIONAL SUPPORT ENGINE
 * Ger empatibaserat st칬d och social n칛rvaro-simulation
 */

interface EmotionalState {
  current_mood: 'excited' | 'motivated' | 'neutral' | 'frustrated' | 'overwhelmed' | 'confident' | 'anxious';
  confidence_level: number;
  stress_indicators: string[];
  energy_level: 'high' | 'medium' | 'low';
  emotional_needs: string[];
}

interface SocialPresenceIndicators {
  last_interaction_feeling: string;
  preferred_support_style: 'encouraging' | 'analytical' | 'empathetic' | 'challenging';
  relationship_stage: 'new' | 'building' | 'established' | 'deep';
  trust_level: number;
}

interface EmotionalSupportStrategy {
  approach: string;
  tone: string;
  messaging_style: string;
  intervention_timing: string;
  support_actions: string[];
}

export const useEmotionalSupport = () => {
  const { user } = useAuth();
  const { currentSessionState } = useContextEngine();
  const { learningProfile, generateNeuroplasticityFeedback } = useAdaptiveLearning();
  const [emotionalState, setEmotionalState] = useState<EmotionalState | null>(null);
  const [socialPresence, setSocialPresence] = useState<SocialPresenceIndicators | null>(null);
  const [loading, setLoading] = useState(false);

  // Detektera emotionellt tillst친nd baserat p친 anv칛ndarens beteende
  const detectEmotionalState = useCallback(async () => {
    if (!user) return null;

    try {
      

      // Analysera beteendeindikatorer
      const behaviorIndicators = {
        session_duration: currentSessionState?.session_id ? 'active' : 'inactive',
        interaction_frequency: 'moderate', // Fr친n context engine
        task_completion_rate: 0.7, // Fr친n behavior patterns  
        help_seeking_frequency: 'low',
        time_between_sessions: 'regular',
        error_recovery_pattern: 'resilient'
      };

      // Regelbaserad emotionell analys
      let detectedMood: EmotionalState['current_mood'] = 'neutral';
      let confidenceLevel = 0.7;
      let stressIndicators: string[] = [];
      let energyLevel: EmotionalState['energy_level'] = 'medium';
      let emotionalNeeds: string[] = [];

      // Analys baserat p친 beteendeindikatorer
      if (behaviorIndicators.task_completion_rate > 0.8) {
        detectedMood = 'confident';
        confidenceLevel = 0.9;
        energyLevel = 'high';
        emotionalNeeds = ['recognition', 'challenge'];
      } else if (behaviorIndicators.task_completion_rate < 0.4) {
        detectedMood = 'frustrated';
        confidenceLevel = 0.4;
        stressIndicators = ['low_completion', 'possible_overwhelm'];
        emotionalNeeds = ['encouragement', 'guidance', 'break_suggestion'];
      } else if (behaviorIndicators.help_seeking_frequency === 'high') {
        detectedMood = 'anxious';
        stressIndicators = ['uncertainty', 'need_reassurance'];
        emotionalNeeds = ['clarity', 'step_by_step_guidance'];
      }

      const newEmotionalState: EmotionalState = {
        current_mood: detectedMood,
        confidence_level: confidenceLevel,
        stress_indicators: stressIndicators,
        energy_level: energyLevel,
        emotional_needs: emotionalNeeds
      };

      setEmotionalState(newEmotionalState);

      // Spara emotional state i databasen
      await supabase.from('user_context_events').insert({
        user_id: user.id,
        event_type: 'emotional_state_detected',
        context_data: {
          emotional_state: newEmotionalState as any,
          detection_method: 'behavior_analysis',
          timestamp: new Date().toISOString()
        } as any
      });

      
      return newEmotionalState;

    } catch (error) {
      console.error('Error detecting emotional state:', error);
      return null;
    }
  }, [user, currentSessionState]);

  // Generera empatibaserad support
  const generateEmpathicSupport = useCallback((emotionalState: EmotionalState, context: string) => {
    const supportStrategies = {
      excited: {
        tone: 'enthusiastic',
        message: 'Jag k칛nner din energi! L친t oss kanalisera den h칛r entusiasmen till n친got fantastiskt.',
        action: 'F칬resl친 utmanande aktiviteter som matchar energiniv친n'
      },
      motivated: {
        tone: 'encouraging',
        message: 'Din motivation lyser igenom! Det h칛r 칛r perfekt tid f칬r att ta n칛sta steg.',
        action: 'Ge konkreta n칛sta steg som bygger p친 motivationen'
      },
      neutral: {
        tone: 'varm_professionell',
        message: 'Hur k칛nns det just nu? Jag 칛r h칛r f칬r att st칬tta dig vart du 칛n befinner dig.',
        action: 'Erbjud olika v칛gar fram친t baserat p친 preferenser'
      },
      frustrated: {
        tone: 'empatisk_lugnande',
        message: 'Jag f칬rst친r att det kan k칛nnas frustrerande. Det 칛r helt normalt - och ett tecken p친 att du utmanar dig sj칛lv.',
        action: 'F칬resl친 paus eller enklare uppgifter f칬r att 친terbygga konfidensen'
      },
      overwhelmed: {
        tone: 'lugnande_st칬ttande',
        message: 'Det k칛nns som mycket just nu, eller hur? L친t oss ta det steg f칬r steg, utan press.',
        action: 'Bryt ner uppgifter i mindre delar och f칬resl친 andningspaus'
      },
      confident: {
        tone: 'erk칛nnande',
        message: 'Din sj칛lvf칬rtroende syns tydligt! Du har verkligen kommit l친ngt p친 din resa.',
        action: 'Fira framstegen och introducera nya utmaningar'
      },
      anxious: {
        tone: 'trygg_lugnande',
        message: 'Jag m칛rker att du kanske k칛nner dig lite os칛ker. Det 칛r okej - vi tar det i din takt.',
        action: 'Ge tydlig struktur och sm친, hanterbar steg'
      }
    };

    const strategy = supportStrategies[emotionalState.current_mood];
    
    // L칛gg till neuroplasticitet-perspektiv
    const neuroplasticityContext = emotionalState.current_mood === 'frustrated' || emotionalState.current_mood === 'overwhelmed' 
      ? ' Kom ih친g att n칛r hj칛rnan upplever utmaningar v칛xer den starkast - du 칛r mitt i en viktig l칛randeprocess.'
      : ' Din hj칛rna anpassar sig konstant till dina nya erfarenheter, och varje steg fram친t st칛rker dina neurala v칛gar.';

    return {
      tone: strategy.tone,
      message: strategy.message + neuroplasticityContext,
      recommended_action: strategy.action,
      emotional_validation: getEmotionalValidation(emotionalState.current_mood)
    };
  }, []);

  // Emotional validation f칬r olika mood states
  const getEmotionalValidation = (mood: EmotionalState['current_mood']) => {
    const validations = {
      excited: 'Din entusiasm 칛r smittande och visar p친 en fantastisk inst칛llning till l칛rande!',
      motivated: 'Din motivation 칛r din superkraft - den driver dig mot dina m친l.',
      neutral: 'Att vara i ett lugnt, balanserat tillst친nd 칛r ofta perfekt f칬r reflektion och planering.',
      frustrated: 'Frustration 칛r hj칛rnans s칛tt att s칛ga att du bryr dig om resultatet - det 칛r faktiskt positivt.',
      overwhelmed: 'Att k칛nna sig 칬verv칛ldigad visar att du tar p친 dig utmaningar - det kr칛ver mod.',
      confident: 'Din sj칛lvf칬rtroende 칛r v칛lf칬rtj칛nt och bygger p친 dina verkliga prestationer.',
      anxious: 'Oro visar att du bryr dig om att g칬ra bra ifr친n dig - det 칛r en styrka, inte en svaghet.'
    };

    return validations[mood];
  };

  // Social presence simulation - bygger relation 칬ver tid
  const simulateSocialPresence = useCallback(() => {
    if (!socialPresence) return null;

    const presenceResponses = {
      new: {
        greeting: 'Hej! Kul att tr칛ffas. Jag 칛r Stefan och ser fram emot att l칛ra k칛nna dig b칛ttre.',
        check_in: 'Hur k칛nns det att vara h칛r? Jag vill att du ska k칛nna dig bekv칛m.',
        support_style: 'encouraging'
      },
      building: {
        greeting: 'Hej igen! Jag 칛r glad att se dig tillbaka. Hur har det g친tt sedan sist?',
        check_in: 'Jag kommer ih친g att du arbetade med [specifik sak]. Hur k칛nns det nu?',
        support_style: 'empathetic'
      },
      established: {
        greeting: 'Hej [namn]! Vad roligt att vi ses igen. Jag har funderat p친 dina framsteg.',
        check_in: 'Baserat p친 vad jag vet om dig k칛nns det som du kanske 칛r redo f칬r n칛sta steg?',
        support_style: 'analytical'
      },
      deep: {
        greeting: 'Hej min v칛n! Jag ser fram emot v친rt samtal idag. Vad ligger p친 ditt hj칛rta?',
        check_in: 'Jag k칛nner dig tillr칛ckligt v칛l f칬r att m칛rka n칛r n친got 칛r annorlunda. Vill du prata om det?',
        support_style: 'challenging'
      }
    };

    return presenceResponses[socialPresence.relationship_stage];
  }, [socialPresence]);

  // Adaptive check-ins baserat p친 emotional state
  const scheduleEmotionalCheckIn = useCallback(async (context: string) => {
    if (!user || !emotionalState) return;

    const checkInStrategies = {
      high_stress: {
        timing: 'immediate',
        message: 'Jag m칛rker att det kanske k칛nns intensivt just nu. Vill du ta en paus och prata?'
      },
      low_engagement: {
        timing: 'gentle_nudge',
        message: 'Hej! Jag undrar hur du m친r och om det 칛r n친got jag kan hj칛lpa till med?'
      },
      breakthrough_moment: {
        timing: 'celebration',
        message: 'WOW! Jag s친g precis att du genomf칬rde n친got riktigt utmanande. Hur k칛nns det?'
      },
      plateau: {
        timing: 'motivational',
        message: 'Du har arbetat h친rt l칛nge nu. Ibland beh칬ver hj칛rnan vila f칬r att integrera allt du l칛rt dig.'
      }
    };

    // Best칛m vilken typ av check-in som beh칬vs
    let checkInType = 'low_engagement';
    if (emotionalState.stress_indicators.length > 2) checkInType = 'high_stress';
    if (emotionalState.confidence_level > 0.9) checkInType = 'breakthrough_moment';
    if (emotionalState.energy_level === 'low') checkInType = 'plateau';

    const strategy = checkInStrategies[checkInType];

    // Schemal칛gg check-in genom context engine
    await supabase.from('proactive_interventions').insert({
      user_id: user.id,
      intervention_type: 'emotional_check_in',
      trigger_condition: context,
      scheduled_for: new Date().toISOString(),
      content: strategy.message,
      context_snapshot: {
        emotional_state: emotionalState,
        strategy: strategy,
        check_in_type: checkInType
      } as any
    });

    
  }, [user, emotionalState]);

  // Auto-detection vid aktivitet
  useEffect(() => {
    if (user) {
      detectEmotionalState();
    }
  }, [user, detectEmotionalState]);

  // Uppdatera social presence over tid
  useEffect(() => {
    if (user && !socialPresence) {
      setSocialPresence({
        last_interaction_feeling: 'positive',
        preferred_support_style: 'encouraging',
        relationship_stage: 'new',
        trust_level: 0.5
      });
    }
  }, [user, socialPresence]);

  return {
    emotionalState,
    socialPresence,
    loading,
    detectEmotionalState,
    generateEmpathicSupport,
    simulateSocialPresence,
    scheduleEmotionalCheckIn,
    getEmotionalValidation
  };
};