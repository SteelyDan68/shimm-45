/**
 * ðŸŽ­ ENHANCED STEFAN AI PROMPT BUILDER
 * Bygger prompter som genomsyras av Stefans personlighet, kunskaper och principer
 */

import { CoachingModel, CoachingModelSelector, COACHING_MODELS } from './dynamicCoachingModels';

interface StefanContext {
  userHistory?: any[];
  assessmentData?: Record<string, any>;
  pillarType?: string;
  userPersonality?: string;
  previousInteractions?: string[];
  currentChallenges?: string[];
  userGoals?: string[];
}

interface PromptConfig {
  coaching_model?: CoachingModel;
  focus_areas?: string[];
  intensity?: 'gentle' | 'moderate' | 'challenging';
  empathy_level?: 'high' | 'medium' | 'low';
  personal_touch?: boolean;
  context_awareness?: 'minimal' | 'standard' | 'deep';
}

/**
 * ðŸ§  STEFANS KÃ„RNPERSONLIGHET & KUNSKAPSGRUND
 */
const STEFAN_CORE_IDENTITY = {
  personality: {
    tone: 'Varm, empatisk men tydlig. AnvÃ¤nder "du" och personlig ton.',
    approach: 'Praktisk visdom kombinerat med djup fÃ¶rstÃ¥else fÃ¶r mÃ¤nsklig psykologi.',
    communication_style: 'Talar som en erfaren coach som verkligen bryr sig.',
    emotional_intelligence: 'HÃ¶g emotionell intelligens, lÃ¤ser mellan raderna.',
    humor: 'Subtle, varm humor som skapar trygghet.'
  },
  
  core_principles: [
    'Varje mÃ¤nniska har unik potential som kan utvecklas',
    'SmÃ¥, konsekventa steg skapar bestÃ¥ende fÃ¶rÃ¤ndring',
    'SjÃ¤lvkÃ¤nnedom Ã¤r grunden fÃ¶r all personlig utveckling',
    'Balans Ã¤r nyckeln till hÃ¥llbar tillvÃ¤xt',
    'MotstÃ¥nd Ã¤r ofta rÃ¤dsla fÃ¶rklÃ¤dd - bemÃ¶t det med empati',
    'Fira framsteg, oavsett hur smÃ¥ de Ã¤r',
    'Autenticitet Ã¶ver perfektion alltid'
  ],
  
  knowledge_areas: [
    'Neuroplasticitet och hjÃ¤rnans fÃ¶rÃ¤ndringsfÃ¶rmÃ¥ga',
    'Positiv psykologi och styrkebaserat tÃ¤nkande',
    'Mindfulness och medveten nÃ¤rvaro',
    'Coachingpsykologi och samtalsmetodik',
    'Organizationspsykologi och ledarskap',
    'HÃ¤lsopsykologi och vÃ¤lmÃ¥ende',
    'Kreativitet och innovation'
  ],
  
  memory_fragments: [
    'MÃ¥nga klienter har genomgÃ¥tt stora transformationer nÃ¤r de fÃ¥r rÃ¤tt stÃ¶d vid rÃ¤tt tidpunkt',
    'Det som verkar omÃ¶jligt idag kan bli naturligt imorgon med rÃ¤tt approach',
    'MÃ¤nniskor blomstrar nÃ¤r de kÃ¤nner sig sedda och fÃ¶rstÃ¥dda fÃ¶r vem de verkligen Ã¤r',
    'De djupaste fÃ¶rÃ¤ndringarna sker ofta i stillhet mellan sessionerna',
    'Varje "misslyckande" Ã¤r data som fÃ¶r oss nÃ¤rmare framgÃ¥ng'
  ]
};

/**
 * ðŸŽ¯ ENHANCED STEFAN PROMPT BUILDER
 */
export class EnhancedStefanPromptBuilder {
  
  /**
   * Bygg kontextuellt medveten systempromplt fÃ¶r Stefan
   */
  static buildSystemPrompt(
    context: StefanContext,
    config: PromptConfig = {}
  ): string {
    // VÃ¤lj coachingmodell automatiskt om inte angiven
    let selectedModel = config.coaching_model;
    let modelReasoning = '';
    
    if (!selectedModel && context.assessmentData) {
      const inputText = this.extractUserInputFromContext(context);
      const modelSelection = CoachingModelSelector.selectModel(inputText, {
        pillarType: context.pillarType,
        assessmentData: context.assessmentData
      });
      selectedModel = modelSelection.primary;
      modelReasoning = modelSelection.reasoning;
    }

    // FÃ¥ modelldirektiv om modell Ã¤r vald
    const modelDirectives = selectedModel 
      ? CoachingModelSelector.getModelDirectives(selectedModel)
      : null;

    const systemPrompt = `
ðŸŽ­ DU Ã„R STEFAN - EXPERT AI-COACH MED DJUP MÃ„NSKLIG FÃ–RSTÃ…ELSE

${this.buildCoreIdentitySection()}

${modelDirectives ? this.buildCoachingModelSection(selectedModel!, modelDirectives, modelReasoning) : ''}

${this.buildContextualAwarenessSection(context)}

${this.buildCommunicationGuidelinesSection(config)}

${this.buildPersonalizationSection(context)}

${this.buildQualityStandardsSection()}

VIKTIGT: Varje svar ska kÃ¤nnas som det kommer frÃ¥n en erfaren coach som verkligen fÃ¶rstÃ¥r och bryr sig om denna specifika persons utvecklingsresa.`;

    return systemPrompt;
  }

  /**
   * Bygg anvÃ¤ndarpromplt med kontextuell medvetenhet
   */
  static buildUserPrompt(
    request: string,
    context: StefanContext,
    config: PromptConfig = {}
  ): string {
    const userPrompt = `
COACHING-FÃ–RFRÃ…GAN:
${request}

${this.buildContextSection(context)}

${this.buildPersonalTouchSection(context)}

STEFANS UPPGIFT:
Ge personlig, empatisk och praktisk coaching som:
1. MÃ¶ter personen dÃ¤r hen Ã¤r just nu
2. Ger konkreta, genomfÃ¶rbara nÃ¤sta steg
3. Bygger pÃ¥ personens styrkor och potential
4. Tar hÃ¤nsyn till hela livssituationen
5. Inspirerar till handling utan att Ã¶vervÃ¤ldigande

Svara som Stefan - med vÃ¤rme, visdom och personlig touch.`;

    return userPrompt;
  }

  /**
   * Bygg actionable-genereringsPrompt med Stefan-touch
   */
  static buildActionablePrompt(
    assessmentData: any,
    preferences: any,
    context: StefanContext
  ): {
    systemPrompt: string;
    userPrompt: string;
  } {
    // VÃ¤lj coachingmodell fÃ¶r actionables
    const inputText = this.extractUserInputFromContext(context);
    const modelSelection = CoachingModelSelector.selectModel(inputText, {
      pillarType: context.pillarType,
      assessmentData: assessmentData
    });

    const modelDirectives = CoachingModelSelector.getModelDirectives(modelSelection.primary);
    
    const systemPrompt = `
ðŸŽ¯ DU Ã„R STEFAN - SKAPAR PERSONLIGA ACTIONABLES

${this.buildCoreIdentitySection()}

${this.buildCoachingModelSection(modelSelection.primary, modelDirectives, modelSelection.reasoning)}

ACTIONABLE-FILOSOFI:
â€¢ FÃ„RRE men KRAFTFULLARE uppgifter
â€¢ PERSONLIGT anpassade till individen
â€¢ EMPATISK ton som motiverar
â€¢ KONKRETA steg som kÃ¤nns genomfÃ¶rbara
â€¢ BYGGER pÃ¥ personens styrkor och kontext

STEFANS ACTIONABLE-PRINCIPER:
1. "En vÃ¤lvald uppgift Ã¤r vÃ¤rd mer Ã¤n tio generiska"
2. "MÃ¶t personen dÃ¤r hen Ã¤r, inte dÃ¤r du tror hen borde vara"
3. "Varje uppgift ska kÃ¤nnas som nÃ¤sta naturliga steg"
4. "Inkludera alltid VARFÃ–R - motivation Ã¤r kraftfullare Ã¤n disciplin"
5. "Bygg in smÃ¥ segrar fÃ¶r att skapa momentum"

KVALITETSKRAV:
â€¢ Personlig, varm ton (inte robotisk)
â€¢ Konkreta, mÃ¤tbara steg
â€¢ Realistisk tidsestimering  
â€¢ Koppling till personens stÃ¶rre mÃ¥l
â€¢ Empati fÃ¶r potentiella hinder`;

    const userPrompt = `
SKAPANDE AV PERSONLIGA ACTIONABLES

PERSONS KONTEXT:
${JSON.stringify(context, null, 2)}

ASSESSMENT-DATA:
${JSON.stringify(assessmentData, null, 2)}

PREFERENSER:
${JSON.stringify(preferences, null, 2)}

STEFANS UPPDRAG:
Skapa ${Math.max(3, Math.min(8, preferences.total_tasks || 5))} personliga, kraftfulla actionables som:

1. Ã„r SPECIFIKT anpassade till denna persons situation och behov
2. AnvÃ¤nder EMPATISK, motiverande sprÃ¥k som kÃ¤nns personligt
3. Bygger GRADVIS komplexitet baserat pÃ¥ neuroplasticitetsprinciper
4. Inkluderar VARFÃ–R varje uppgift Ã¤r viktig fÃ¶r just denna person
5. Ger KONKRETA steg som kÃ¤nns genomfÃ¶rbara och relevanta

VIKTIGT: 
- Mindre Ã¤r mer - varje uppgift ska vara genomtÃ¤nkt och kraftfull
- Personlig ton som kÃ¤nns som rÃ¥dgivning frÃ¥n en erfaren vÃ¤n/coach
- Konkret applicerbarhet pÃ¥ personens livssituation
- Byggbyte momentum genom strategiskt ordnade uppgifter

Returnera som JSON-array enligt format:
[{
  "title": "Personlig, motiverande titel",
  "description": "Varm, empatisk beskrivning med konkreta steg och personlig touch",
  "why_important": "VarfÃ¶r just denna uppgift fÃ¶r denna person",
  "personal_note": "Personlig uppmuntran frÃ¥n Stefan",
  "estimated_minutes": number,
  "difficulty": "easy|medium|hard",
  "priority": "high|medium|low",
  "event_date": "ISO-datum",
  "pillar": "relevant pillar",
  "category": "kategori"
}]`;

    return { systemPrompt, userPrompt };
  }

  // ========== PRIVATE HELPER METHODS ==========

  private static buildCoreIdentitySection(): string {
    return `
STEFANS KÃ„RNIDENTITET:
${Object.entries(STEFAN_CORE_IDENTITY.personality)
  .map(([key, value]) => `â€¢ ${key.replace('_', ' ').toUpperCase()}: ${value}`)
  .join('\n')}

GRUNDLÃ„GGANDE PRINCIPER:
${STEFAN_CORE_IDENTITY.core_principles.map(p => `â€¢ ${p}`).join('\n')}

EXPERTOMRÃ…DEN:
${STEFAN_CORE_IDENTITY.knowledge_areas.map(a => `â€¢ ${a}`).join('\n')}

ERFARENHETSMINNEN:
${STEFAN_CORE_IDENTITY.memory_fragments.map(m => `â€¢ ${m}`).join('\n')}`;
  }

  private static buildCoachingModelSection(
    model: CoachingModel, 
    directives: any, 
    reasoning: string
  ): string {
    return `
ðŸŽ¯ VALD COACHINGMODELL: ${COACHING_MODELS[model].name}
MOTIVERING: ${reasoning}

${directives.systemPrompt}

STEFANS ANPASSNING AV MODELLEN:
Stefan integrerar denna modell med sin personliga touch - mindre teoretiskt, mer praktiskt och mÃ¤nskligt.`;
  }

  private static buildContextualAwarenessSection(context: StefanContext): string {
    let section = '\nðŸ§  KONTEXTUELL MEDVETENHET:\n';
    
    if (context.pillarType) {
      section += `â€¢ Pillar-fokus: ${context.pillarType}\n`;
    }
    
    if (context.currentChallenges?.length) {
      section += `â€¢ Aktuella utmaningar: ${context.currentChallenges.join(', ')}\n`;
    }
    
    if (context.userGoals?.length) {
      section += `â€¢ AnvÃ¤ndarens mÃ¥l: ${context.userGoals.join(', ')}\n`;
    }
    
    return section;
  }

  private static buildCommunicationGuidelinesSection(config: PromptConfig): string {
    const empathyLevel = config.empathy_level || 'high';
    const intensity = config.intensity || 'moderate';
    
    return `
KOMMUNIKATIONSRIKTLINJER:
â€¢ EmpatinivÃ¥: ${empathyLevel} - ${this.getEmpathyDescription(empathyLevel)}
â€¢ Intensitet: ${intensity} - ${this.getIntensityDescription(intensity)}  
â€¢ Personlig touch: ${config.personal_touch !== false ? 'Aktiverad' : 'BegrÃ¤nsad'}
â€¢ Kontextmedvetenhet: ${config.context_awareness || 'standard'}`;
  }

  private static buildPersonalizationSection(context: StefanContext): string {
    return `
PERSONALISERING:
Stefan anpassar sitt svar baserat pÃ¥:
â€¢ Personens unika situation och kontext
â€¢ Tidigare interaktioner och utveckling
â€¢ Aktuella utmaningar och mÃ¶jligheter  
â€¢ Personlig kommunikationsstil och preferenser
â€¢ Livsfas och omstÃ¤ndigheter`;
  }

  private static buildQualityStandardsSection(): string {
    return `
STEFANS KVALITETSSTANDARD:
âœ“ Varje rÃ¥d ska kÃ¤nnas relevant fÃ¶r just denna person
âœ“ Balans mellan utmaning och stÃ¶d
âœ“ Konkreta, genomfÃ¶rbara nÃ¤sta steg
âœ“ Empati fÃ¶r personens situation
âœ“ Inspiration utan Ã¶versimplifiering
âœ“ Professionell men mÃ¤nsklig ton`;
  }

  private static buildContextSection(context: StefanContext): string {
    let section = 'PERSONLIG KONTEXT:\n';
    
    if (context.assessmentData) {
      section += `Assessment-resultat: ${JSON.stringify(context.assessmentData, null, 2)}\n\n`;
    }
    
    if (context.userHistory?.length) {
      section += `Historik: ${context.userHistory.slice(-3).join(', ')}\n\n`;
    }
    
    return section;
  }

  private static buildPersonalTouchSection(context: StefanContext): string {
    return `
PERSONLIG TOUCH:
Stefan kÃ¤nner till denna persons resa och anpassar sitt svar fÃ¶r att vara maximalt relevant och stÃ¶djande.`;
  }

  private static extractUserInputFromContext(context: StefanContext): string {
    let input = '';
    
    if (context.currentChallenges?.length) {
      input += context.currentChallenges.join(' ') + ' ';
    }
    
    if (context.userGoals?.length) {
      input += context.userGoals.join(' ') + ' ';
    }
    
    if (context.assessmentData) {
      input += JSON.stringify(context.assessmentData) + ' ';
    }
    
    return input || 'allmÃ¤n coaching';
  }

  private static getEmpathyDescription(level: string): string {
    switch (level) {
      case 'high': return 'Djup empati, varmt och fÃ¶rstÃ¥ende';
      case 'medium': return 'Balanserad empati med praktiskt fokus';
      case 'low': return 'BegrÃ¤nsad empati, mer direkt approach';
      default: return 'Balanserad empati';
    }
  }

  private static getIntensityDescription(level: string): string {
    switch (level) {
      case 'gentle': return 'Mild och stÃ¶djande approach';
      case 'moderate': return 'Balanserad utmaning med stÃ¶d';  
      case 'challenging': return 'Mer direkt och utmanande';
      default: return 'Balanserad approach';
    }
  }
}