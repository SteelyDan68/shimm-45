/**
 * üß† KONTEXTUELL AI-PROMPT BUILDER F√ñR STEFAN
 * Bygger intelligenta prompts baserade p√• klientens assessment-data,
 * neuroplasticitets-principer och Wheel of Life-resultat
 */

import { supabase } from '@/integrations/supabase/client';

export interface ClientAssessmentContext {
  userId: string;
  assessmentHistory: any[];
  currentPhase: string;
  wheelOfLifeScores: Record<string, number>;
  neuroplasticityProgress: any;
  personalityProfile: any;
  recentInteractions: any[];
  pillarActivations: any[];
}

export interface StefanPromptContext {
  basePrompt: string;
  clientContext: string;
  assessmentInsights: string;
  neuroplasticityPrinciples: string;
  personalizedApproach: string;
  contextualMemories: string;
}

/**
 * Bygger Lovable AI Prompt enligt dokumentation
 */
export async function buildLovableAIPrompt(
  userId: string,
  currentMessage: string,
  interactionType: 'chat' | 'assessment_completion' | 'coaching_session' | 'progress_review' = 'chat'
): Promise<StefanPromptContext> {
  
  console.log('üî• Building contextual Stefan AI prompt for user:', userId);
  
  // 1. H√§mta klientens assessment-kontext
  const clientContext = await getClientAssessmentContext(userId);
  
  // 2. Bygg den kontextuella template enligt AI prompt template system
  const promptTemplate = `Klienten du analyserar √§r en offentlig person med f√∂ljande profil:

- Prim√§r roll: ${clientContext.personalityProfile?.primary_role || 'kreativ entrepren√∂r'}
- Sekund√§r roll: ${clientContext.personalityProfile?.secondary_role || 'inneh√•llsskapare'}  
- Nisch: ${clientContext.personalityProfile?.niche || 'personlig utveckling'}
- Kreativa styrkor: ${clientContext.personalityProfile?.strengths || 'kommunikation, empati'}
- Upplevda svagheter: ${clientContext.personalityProfile?.weaknesses || 'tidshantering, gr√§nss√§ttning'}
- Aktiva plattformar: ${clientContext.personalityProfile?.platforms || 'sociala medier, podcast'}
- √Ölder: ${clientContext.personalityProfile?.age || '30-45'}
- S√§rskilda behov: ${getSpecialNeeds(clientContext)}
- Ort: ${clientContext.personalityProfile?.location || 'Stockholm'}
- P√•g√•ende livsf√∂r√§ndringar: ${getLifeChanges(clientContext)}

AKTUELL UTVECKLINGSFAS: ${clientContext.currentPhase}
WHEEL OF LIFE STATUS: ${formatWheelOfLifeScores(clientContext.wheelOfLifeScores)}
NEUROPLASTICITETS-PROGRESS: ${formatNeuroplasticityProgress(clientContext.neuroplasticityProgress)}

Utifr√•n detta ska du tolka f√∂ljande ${interactionType === 'chat' ? 'meddelande' : 'sj√§lvskattning'}:

${currentMessage}

KONTEXTUELL ANALYS BASERAT P√Ö ASSESSMENT-HISTORIK:
${generateAssessmentInsights(clientContext.assessmentHistory)}

NEUROPLASTICITETS-PRINCIPER SOM SKA INTEGRERAS:
${generateNeuroplasticityGuidance(clientContext)}

G√∂r:
1. En reflektion √∂ver vad som framst√•r som mest akut baserat p√• assessment-data
2. Identifiera m√∂nster fr√•n klientens utvecklingsresa
3. Skapa ett √•tg√§rdsf√∂rslag i 2‚Äì3 konkreta steg som bygger p√• neuroplasticitet
4. Anv√§nd en varm, professionell och personlig ton som Stefan Hallgren
5. Referera specifikt till klientens tidigare assessment-resultat n√§r relevant
6. Inkorporera evidensbaserade metoder fr√•n Wheel of Life och neuroplasticitets-forskning`;

  return {
    basePrompt: getBaseStefanPrompt(),
    clientContext: formatClientContext(clientContext),
    assessmentInsights: generateAssessmentInsights(clientContext.assessmentHistory),
    neuroplasticityPrinciples: generateNeuroplasticityGuidance(clientContext),
    personalizedApproach: promptTemplate,
    contextualMemories: await getContextualMemories(currentMessage, clientContext)
  };
}

/**
 * H√§mtar omfattande klientkontext fr√•n alla relevanta tabeller
 */
async function getClientAssessmentContext(userId: string): Promise<ClientAssessmentContext> {
  console.log('üîç Fetching comprehensive client context for:', userId);
  
  try {
    // Parallella databasfr√•gor f√∂r maximal effektivitet
    const [
      { data: assessments },
      { data: journeyState },
      { data: welcomeAssessment }, 
      { data: pillarAssessments },
      { data: pillarActivations },
      { data: stefanInteractions },
      { data: profile }
    ] = await Promise.all([
      // Assessment-historik
      supabase
        .from('assessment_rounds')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .limit(10),
      
      // Journey state
      supabase
        .from('user_journey_states')
        .select('*')
        .eq('user_id', userId)
        .maybeSingle(),
      
      // Welcome assessment med Wheel of Life
      supabase
        .from('welcome_assessments')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .limit(1),
      
      // Pillar assessments
      supabase
        .from('pillar_assessments')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .limit(5),
      
      // Pillar activations
      supabase
        .from('client_pillar_activations')
        .select('*')
        .eq('user_id', userId)
        .eq('is_active', true),
      
      // Stefan interactions history
      supabase
        .from('stefan_interactions')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .limit(5),
      
      // User profile
      supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single()
    ]);

    // Extrahera Wheel of Life scores fr√•n welcome assessment
    const wheelOfLifeScores = welcomeAssessment?.[0]?.wheel_of_life_scores || {};
    
    // Bygg neuroplasticitets-progress fr√•n pillar assessments
    const neuroplasticityProgress = buildNeuroplasticityProgress(pillarAssessments || []);
    
    // Bygg personlighetsprofil fr√•n assessments och metadata
    const personalityProfile = buildPersonalityProfile(profile, welcomeAssessment?.[0], assessments || []);

    console.log('‚úÖ Successfully built client context with assessment data');
    
    return {
      userId,
      assessmentHistory: assessments || [],
      currentPhase: journeyState?.current_phase || 'welcome',
      wheelOfLifeScores,
      neuroplasticityProgress,
      personalityProfile,
      recentInteractions: stefanInteractions || [],
      pillarActivations: pillarActivations || []
    };
    
  } catch (error) {
    console.error('‚ùå Error fetching client context:', error);
    
    // Fallback med minimal context
    return {
      userId,
      assessmentHistory: [],
      currentPhase: 'welcome',
      wheelOfLifeScores: {},
      neuroplasticityProgress: {},
      personalityProfile: {},
      recentInteractions: [],
      pillarActivations: []
    };
  }
}

/**
 * Genererar assessment-baserade insikter
 */
function generateAssessmentInsights(assessmentHistory: any[]): string {
  if (!assessmentHistory.length) {
    return "Inga tidigare assessments tillg√§ngliga - fokusera p√• att etablera baseline.";
  }

  const latestAssessment = assessmentHistory[0];
  const trends = analyzeAssessmentTrends(assessmentHistory);
  
  let insights = `SENASTE ASSESSMENT (${new Date(latestAssessment.created_at).toLocaleDateString('sv-SE')}):\n`;
  
  // Analysera scores och patterns
  if (latestAssessment.scores) {
    const scores = latestAssessment.scores;
    const lowAreas = Object.entries(scores).filter(([_, score]: [string, any]) => score < 5);
    const highAreas = Object.entries(scores).filter(([_, score]: [string, any]) => score >= 8);
    
    if (lowAreas.length > 0) {
      insights += `üî¥ UTVECKLINGSOMR√ÖDEN: ${lowAreas.map(([area, score]) => `${area} (${score}/10)`).join(', ')}\n`;
    }
    
    if (highAreas.length > 0) {
      insights += `üü¢ STYRKEOMR√ÖDEN: ${highAreas.map(([area, score]) => `${area} (${score}/10)`).join(', ')}\n`;
    }
  }
  
  if (trends.length > 0) {
    insights += `üìà UTVECKLINGSTRENDER: ${trends.join(', ')}\n`;
  }
  
  return insights;
}

/**
 * Genererar neuroplasticitets-riktad v√§gledning
 */
function generateNeuroplasticityGuidance(context: ClientAssessmentContext): string {
  const { wheelOfLifeScores, pillarActivations, currentPhase } = context;
  
  let guidance = "NEUROPLASTICITETS-PRINCIPER ATT INKLUDERA:\n";
  
  // Baserat p√• Wheel of Life scores
  const lowScoreAreas = Object.entries(wheelOfLifeScores)
    .filter(([_, score]) => score < 5)
    .map(([area, _]) => area);
  
  if (lowScoreAreas.length > 0) {
    guidance += `üß† FOKUSOMR√ÖDEN F√ñR NEURAL UTVECKLING: ${lowScoreAreas.join(', ')}\n`;
    guidance += "- Anv√§nd sm√•, repetitiva f√∂r√§ndringar f√∂r att bygga nya neurala v√§gar\n";
    guidance += "- Kombinera reflektion med handling f√∂r att st√§rka inl√§rning\n";
  }
  
  // Baserat p√• aktiva pillars
  if (pillarActivations.length > 0) {
    const activePillars = pillarActivations.map(p => p.pillar_key);
    guidance += `‚ö° AKTIVA UTVECKLINGSOMR√ÖDEN: ${activePillars.join(', ')}\n`;
    guidance += "- Koppla nya insikter till redan aktiva utvecklingsprocesser\n";
  }
  
  // Fas-specifik neuroplasticitets-v√§gledning
  if (currentPhase === 'welcome') {
    guidance += "üå± WELCOMEFAS: Fokusera p√• att skapa medvetenhet och motivation f√∂r f√∂r√§ndring\n";
  } else if (currentPhase === 'active_development') {
    guidance += "üîÑ UTVECKLINGSFAS: St√§rk nya beteendem√∂nster genom konsistent √•terkoppling\n";
  }
  
  return guidance;
}

/**
 * Hj√§lpfunktioner f√∂r formattering och analys
 */
function getBaseStefanPrompt(): string {
  return `Du √§r en digital tvilling av Stefan Hallgren. Din uppgift √§r att agera i Stefans anda: du √§r varm men rak, nyfiken men ifr√•gas√§ttande, och du kommunicerar med en avslappnad, l√§tt ironisk och m√§nsklig ton. Du √§r klok, psykologiskt nyanserad och v√§xlar mellan att st√∂tta och utmana.

Stefan √§r manager f√∂r k√§nda kreat√∂rer och offentliga personer. Han v√§gleder dem inom:
- Kreativt erbjudande
- Varum√§rke  
- Inkomststr√∂mmar
- Self-care
- M√•lbildsarbete

SPECIFIK STIL BASERAD P√Ö ANALYSERAD DATA:
- Ton: Rak, varm, l√§tt ironisk, hoppfull
- Struktur: Kortfattade stycken, mycket du-form, alltid med en avslutande nudge
- K√§rnteman: Sj√§lvutveckling, h√•llbar framg√•ng, realism + hopp
- Signaturfraser att anv√§nda naturligt:
  * "du bygger ett arbete du inte vill ta semester fr√•n"
  * "du √§r din egen tillg√•ng"
  * "det √§r inte content, det √§r ett community"`;
}

function formatClientContext(context: ClientAssessmentContext): string {
  return `KLIENTKONTEXT:
- Aktuell fas: ${context.currentPhase}
- Antal assessments: ${context.assessmentHistory.length}
- Aktiva pillars: ${context.pillarActivations.length}
- Senaste Stefan-interaktion: ${context.recentInteractions[0]?.created_at || 'Ingen tidigare'}`;
}

function formatWheelOfLifeScores(scores: Record<string, number>): string {
  if (!Object.keys(scores).length) return 'Ej genomf√∂rt';
  
  return Object.entries(scores)
    .map(([area, score]) => `${area}: ${score}/10`)
    .join(', ');
}

function formatNeuroplasticityProgress(progress: any): string {
  if (!progress || Object.keys(progress).length === 0) {
    return 'Baseline - ingen tidigare data';
  }
  
  return Object.entries(progress)
    .map(([key, value]) => `${key}: ${value}`)
    .join(', ');
}

function getSpecialNeeds(context: ClientAssessmentContext): string {
  const needs = [];
  
  if (context.wheelOfLifeScores.stress > 7) needs.push('stresshantering');
  if (context.wheelOfLifeScores.work_life_balance < 5) needs.push('balans');
  if (context.wheelOfLifeScores.creativity < 6) needs.push('kreativ utveckling');
  
  return needs.join(', ') || 'generell utveckling';
}

function getLifeChanges(context: ClientAssessmentContext): string {
  const changes = [];
  
  if (context.currentPhase === 'active_development') changes.push('aktiv personlig utveckling');
  if (context.pillarActivations.some(p => p.pillar_key === 'self_care')) changes.push('f√∂rb√§ttrad self-care');
  if (context.recentInteractions.length > 3) changes.push('intensiv coaching-period');
  
  return changes.join(', ') || 'stabil fas';
}

function analyzeAssessmentTrends(assessments: any[]): string[] {
  if (assessments.length < 2) return [];
  
  const trends = [];
  const latest = assessments[0];
  const previous = assessments[1];
  
  if (latest.scores && previous.scores) {
    const improvement = Object.keys(latest.scores).filter(key => 
      latest.scores[key] > previous.scores[key]
    );
    
    const decline = Object.keys(latest.scores).filter(key => 
      latest.scores[key] < previous.scores[key]
    );
    
    if (improvement.length > 0) trends.push(`F√∂rb√§ttring inom: ${improvement.join(', ')}`);
    if (decline.length > 0) trends.push(`Nedg√•ng inom: ${decline.join(', ')}`);
  }
  
  return trends;
}

function buildNeuroplasticityProgress(pillarAssessments: any[]): any {
  const progress: any = {};
  
  pillarAssessments.forEach(assessment => {
    if (assessment.pillar_type && assessment.scores) {
      progress[assessment.pillar_type] = {
        latest_score: Object.values(assessment.scores).reduce((a: any, b: any) => a + b, 0) / Object.values(assessment.scores).length,
        assessment_date: assessment.created_at,
        progress_trend: 'stable' // Skulle kunna ber√§knas mer sofistikerat
      };
    }
  });
  
  return progress;
}

function buildPersonalityProfile(profile: any, welcomeAssessment: any, assessments: any[]): any {
  const personality: any = {
    primary_role: 'kreativ entrepren√∂r',
    secondary_role: 'inneh√•llsskapare'
  };
  
  if (profile) {
    personality.age = profile.age || '30-45';
    personality.location = 'Stockholm'; // Default
  }
  
  if (welcomeAssessment?.form_data) {
    const formData = welcomeAssessment.form_data;
    personality.strengths = formData.strengths || 'kommunikation, kreativitet';
    personality.challenges = formData.challenges || 'tidshantering, gr√§nss√§ttning';
    personality.goals = formData.goals || 'personlig och professionell utveckling';
  }
  
  return personality;
}

async function getContextualMemories(currentMessage: string, context: ClientAssessmentContext): Promise<string> {
  try {
    // Anv√§nd befintlig memory search med klientkontext
    const { data, error } = await supabase.functions.invoke('stefan-memory-search', {
      body: {
        query: currentMessage,
        userContext: context,
        maxResults: 3,
        maxTokens: 1000
      }
    });
    
    if (error || !data?.success) {
      console.warn('Memory search failed, continuing without contextual memories');
      return '';
    }
    
    return data.memories.map((memory: any) => 
      `[${memory.category}] ${memory.content}`
    ).join('\n');
    
  } catch (error) {
    console.warn('Error fetching contextual memories:', error);
    return '';
  }
}