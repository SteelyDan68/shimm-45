/**
 * üß† DYNAMISK COACHMODELL-SELEKTOR
 * V√§ljer l√§mplig coachmodell baserat p√• anv√§ndarens input och kontext
 */

export type CoachingModel = 
  | 'neuroplastic'
  | 'wheel_of_life' 
  | 'cognitive_behavioral'
  | 'solution_focused'
  | 'strengths_based'
  | 'mindfulness'
  | 'adaptive_ai';

export interface CoachingModelDefinition {
  id: CoachingModel;
  name: string;
  description: string;
  triggers: string[];
  approach: string;
  focusAreas: string[];
  methodologies: string[];
  expectedOutcomes: string[];
}

/**
 * üìä COACHING MODEL DEFINITIONS
 */
export const COACHING_MODELS: Record<CoachingModel, CoachingModelDefinition> = {
  neuroplastic: {
    id: 'neuroplastic',
    name: 'Neuroplastisk Metod',
    description: 'Fokuserar p√• hj√§rnans f√∂rm√•ga att f√∂r√§ndras genom repetition och nya vanor',
    triggers: [
      'vana', 'habit', 'sluta', 'quit', 'beroende', 'addiction', 'routine', 'rutin',
      'snusa', 'r√∂ka', 'dricka', 'tr√§na', 'motion', 'sova', '√§ta', 'diet'
    ],
    approach: 'Gradvis f√∂r√§ndring genom sm√•, konsistenta steg som bygger nya neurala banor',
    focusAreas: ['Vanor', 'Beteendef√∂r√§ndring', 'Repetition', 'Konsistens'],
    methodologies: ['21-dagars regel', 'Micro-habits', 'Habit stacking', 'Environmental design'],
    expectedOutcomes: ['Best√•ende beteendef√∂r√§ndring', 'Automatiska nya m√∂nster', '√ñkad sj√§lvkontroll']
  },

  wheel_of_life: {
    id: 'wheel_of_life',
    name: 'Livets Hjul',
    description: 'Holistisk approach f√∂r att skapa balans mellan olika livsomr√•den',
    triggers: [
      'balans', 'balance', 'liv', 'life', 'omr√•den', 'helhetsvy', 'holistic',
      'work-life', 'v√§lm√•ende', 'wellbeing', 'harmoni', 'j√§mvikt'
    ],
    approach: 'Kartl√§gger och balanserar alla viktiga livsomr√•den f√∂r optimal livstillfredsst√§llelse',
    focusAreas: ['Karri√§r', 'H√§lsa', 'Relationer', 'Personlig utveckling', 'Ekonomi', 'Rekreation'],
    methodologies: ['Livsomr√•desanalys', 'Prioritetsmatris', 'Balansplanering', 'Helhetsperspektiv'],
    expectedOutcomes: ['√ñkad livstillfredsst√§llelse', 'B√§ttre prioritering', 'Harmoniskt liv']
  },

  cognitive_behavioral: {
    id: 'cognitive_behavioral',
    name: 'Kognitiv Beteendeterapi (KBT)',
    description: 'Fokuserar p√• sambandet mellan tankar, k√§nslor och beteenden',
    triggers: [
      'tankar', 'thoughts', 'k√§nslor', 'emotions', 'oro', 'anxiety', 'stress',
      'negativ', 'negative', 'sj√§lvkritik', 'perfectionism', 'kbt'
    ],
    approach: 'Identifierar och f√∂r√§ndrar dysfunktionella tankem√∂nster och beteenden',
    focusAreas: ['Tankem√∂nster', 'K√§nsloreglering', 'Probleml√∂sning', 'Coping-strategier'],
    methodologies: ['Tankeregistrering', 'Omstrukturering', 'Exponering', 'Mindfulness'],
    expectedOutcomes: ['F√∂rb√§ttrad k√§nsloreglering', 'Mindre oro och stress', '√ñkad sj√§lvk√§nnedom']
  },

  solution_focused: {
    id: 'solution_focused',
    name: 'L√∂sningsfokuserad Coaching',
    description: 'Fokuserar p√• l√∂sningar och resurser snarare √§n problem',
    triggers: [
      'l√∂sning', 'solution', 'framtid', 'future', 'm√•l', 'goal', 'vision',
      'm√∂jligheter', 'opportunities', 'potential', 'framg√•ng'
    ],
    approach: 'Bygger p√• klientens styrkor och tidigare framg√•ngar f√∂r att skapa √∂nskad f√∂r√§ndring',
    focusAreas: ['M√•ls√§ttning', 'Resursmobilisering', 'Framtidsfokus', 'Styrkebaserat'],
    methodologies: ['Miracle question', 'Scaling questions', 'Exception finding', 'Goal setting'],
    expectedOutcomes: ['Tydliga m√•l', '√ñkat sj√§lvf√∂rtroende', 'Snabbare resultat']
  },

  strengths_based: {
    id: 'strengths_based',
    name: 'Styrkebaserad Coaching',
    description: 'Bygger p√• och utvecklar naturliga talanger och styrkor',
    triggers: [
      'styrkor', 'strengths', 'talang', 'talent', 'beg√•vning', 'potential',
      'naturlig', 'bra p√•', 'excellent', 'kompetens', 'skicklighet'
    ],
    approach: 'Identifierar och maximerar anv√§ndning av personliga styrkor och talanger',
    focusAreas: ['Talangidentifiering', 'Styrkeutveckling', 'Prestationsoptimering', 'Sj√§lvk√§nnedom'],
    methodologies: ['Styrkeanalys', 'StrengthsFinder', 'Talangutveckling', 'Performance coaching'],
    expectedOutcomes: ['Maximerad potential', '√ñkad prestation', 'St√∂rre arbetsgl√§dje']
  },

  mindfulness: {
    id: 'mindfulness',
    name: 'Mindfulness-baserad Coaching',
    description: 'Fokuserar p√• n√§rvarande medvetenhet och acceptans',
    triggers: [
      'mindfulness', 'meditation', 'n√§rvarande', 'present', 'medvetenhet',
      'awareness', 'acceptans', 'acceptance', 'stillhet', 'lugn', 'stress'
    ],
    approach: 'Utvecklar n√§rvarande medvetenhet och acceptans f√∂r att hantera utmaningar',
    focusAreas: ['Medvetenhet', 'Acceptans', 'Stresshantering', 'Emotionell intelligens'],
    methodologies: ['Mindfulness-meditation', 'Body scanning', 'Breathing exercises', 'Present moment awareness'],
    expectedOutcomes: ['Minskad stress', '√ñkad emotionell stabilitet', 'B√§ttre fokus']
  },

  adaptive_ai: {
    id: 'adaptive_ai',
    name: 'Adaptiv AI-coaching',
    description: 'AI v√§ljer b√§sta approach baserat p√• kontext och behov',
    triggers: [
      'os√§ker', 'uncertain', 'komplex', 'complex', 'olika', 'multiple',
      'blandad', 'mixed', 'allm√§n', 'general', 'bred', 'wide'
    ],
    approach: 'Kombinerar flera coachingmetoder baserat p√• specifik situation och behov',
    focusAreas: ['Kontextanpassning', 'Metodintegration', 'Personalisering', 'Flexibilitet'],
    methodologies: ['AI-analys', 'Multi-modal coaching', 'Adaptive techniques', 'Personalized approach'],
    expectedOutcomes: ['Optimal anpassning', 'Flexibel coaching', 'Personlig utveckling']
  }
};

/**
 * üéØ DYNAMISK MODELLVAL
 */
export class CoachingModelSelector {
  /**
   * V√§lj l√§mplig coachingmodell baserat p√• input
   */
  static selectModel(
    input: string,
    context?: {
      pillarType?: string;
      userHistory?: string[];
      assessmentData?: Record<string, any>;
      userPreferences?: Record<string, any>;
    }
  ): {
    primary: CoachingModel;
    secondary?: CoachingModel;
    confidence: number;
    reasoning: string;
  } {
    const normalizedInput = input.toLowerCase().trim();
    const modelScores: Record<CoachingModel, number> = {
      neuroplastic: 0,
      wheel_of_life: 0,
      cognitive_behavioral: 0,
      solution_focused: 0,
      strengths_based: 0,
      mindfulness: 0,
      adaptive_ai: 0
    };

    // Analysera input mot triggers
    Object.entries(COACHING_MODELS).forEach(([modelId, model]) => {
      const triggers = model.triggers;
      triggers.forEach(trigger => {
        if (normalizedInput.includes(trigger.toLowerCase())) {
          modelScores[modelId as CoachingModel] += 1;
        }
      });
    });

    // Kontextuell viktning baserat p√• pillarType
    if (context?.pillarType) {
      switch (context.pillarType) {
        case 'self_care':
          modelScores.neuroplastic += 0.5;
          modelScores.mindfulness += 0.5;
          break;
        case 'skills':
          modelScores.strengths_based += 0.5;
          modelScores.solution_focused += 0.3;
          break;
        case 'talent':
          modelScores.strengths_based += 0.8;
          break;
        case 'brand':
          modelScores.solution_focused += 0.5;
          modelScores.strengths_based += 0.3;
          break;
        case 'economy':
          modelScores.solution_focused += 0.5;
          modelScores.cognitive_behavioral += 0.3;
          break;
        case 'open_track':
          modelScores.wheel_of_life += 0.5;
          modelScores.adaptive_ai += 0.3;
          break;
      }
    }

    // Hitta h√∂gsta po√§ng
    const sortedModels = Object.entries(modelScores)
      .sort(([,a], [,b]) => b - a);

    const [primaryModelId, primaryScore] = sortedModels[0];
    const [secondaryModelId, secondaryScore] = sortedModels[1];

    // Om inget tydligt val, anv√§nd adaptive AI
    if (primaryScore < 0.5) {
      return {
        primary: 'adaptive_ai',
        confidence: 0.7,
        reasoning: 'Ingen tydlig matchning med specifik modell. Anv√§nder adaptiv AI-approach f√∂r personaliserad coaching.'
      };
    }

    const confidence = Math.min(primaryScore / 3, 1); // Normalisera confidence

    return {
      primary: primaryModelId as CoachingModel,
      secondary: secondaryScore > 0.3 ? secondaryModelId as CoachingModel : undefined,
      confidence,
      reasoning: this.generateReasoning(
        primaryModelId as CoachingModel,
        secondaryModelId as CoachingModel,
        normalizedInput,
        context
      )
    };
  }

  /**
   * Generera f√∂rklaring f√∂r modellval
   */
  private static generateReasoning(
    primary: CoachingModel,
    secondary: CoachingModel,
    input: string,
    context?: any
  ): string {
    const primaryModel = COACHING_MODELS[primary];
    const secondaryModel = secondary ? COACHING_MODELS[secondary] : null;

    let reasoning = `Valde ${primaryModel.name} baserat p√• nyckelord i din input som matchar ${primaryModel.approach.toLowerCase()}.`;

    if (secondaryModel) {
      reasoning += ` Kommer ocks√• att anv√§nda element fr√•n ${secondaryModel.name} f√∂r en mer helt√§ckande approach.`;
    }

    if (context?.pillarType) {
      reasoning += ` Kontexten "${context.pillarType}" f√∂rst√§rker detta val.`;
    }

    return reasoning;
  }

  /**
   * H√§mta systemdirektiv f√∂r vald modell
   */
  static getModelDirectives(model: CoachingModel): {
    systemPrompt: string;
    focusAreas: string[];
    methodologies: string[];
  } {
    const modelDef = COACHING_MODELS[model];
    
    const systemPrompt = `
Du anv√§nder ${modelDef.name}-metoden i din coaching.

APPROACH: ${modelDef.approach}

FOKUSOMR√ÖDEN:
${modelDef.focusAreas.map(area => `‚Ä¢ ${area}`).join('\n')}

METODER ATT ANV√ÑNDA:
${modelDef.methodologies.map(method => `‚Ä¢ ${method}`).join('\n')}

F√ñRV√ÑNTADE RESULTAT:
${modelDef.expectedOutcomes.map(outcome => `‚Ä¢ ${outcome}`).join('\n')}

VIKTIGT: Anpassa alltid din coaching till individens specifika situation och behov.`;

    return {
      systemPrompt,
      focusAreas: modelDef.focusAreas,
      methodologies: modelDef.methodologies
    };
  }
}