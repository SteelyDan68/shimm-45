/**
 * üìã SYSTEMINTEGRITET BEST PRACTICES - IMPLEMENTATION GUIDE
 * 
 * Detta dokument ger konkreta best practices f√∂r att bevara systemintegritet
 * och tydliga rollstrukturer under utveckling.
 */

// ============= ROLLBASERAD ARKITEKTUR GUIDE =============

export const ROLE_ARCHITECTURE_GUIDE = {
  
  /**
   * üèóÔ∏è ARKITEKTURPRINCIPER
   */
  principles: {
    single_source_of_truth: {
      description: "user_id √§r den enda k√§llan till sanning f√∂r all anv√§ndardata",
      implementation: [
        "Alla tabeller med anv√§ndardata ska ha user_id kolumn",
        "Anv√§nd user_attributes f√∂r metadata och egenskaper",
        "Anv√§nd user_roles f√∂r rollhantering (ALDRIG direkt p√• profiles)",
        "coach_client_assignments f√∂r relationer mellan roller"
      ],
      examples: {
        correct: "SELECT * FROM tasks WHERE user_id = auth.uid()",
        incorrect: "SELECT * FROM tasks WHERE profile_id = (SELECT id FROM profiles...)"
      }
    },
    
    hierarchical_roles: {
      description: "Tydlig rollhierarki med arv och begr√§nsningar",
      hierarchy: [
        { role: "superadmin", level: 100, inherits: ["admin", "coach", "client"] },
        { role: "admin", level: 80, inherits: ["coach", "client"] },
        { role: "coach", level: 60, inherits: ["client"] },
        { role: "client", level: 40, inherits: [] }
      ],
      implementation: [
        "Superadmin har god mode - kan se och g√∂ra allt",
        "Admin kan hantera organisationen och anv√§ndare",
        "Coach kan bara se sina tilldelade klienter", 
        "Client kan bara se sin egen data"
      ]
    },
    
    defense_in_depth: {
      description: "Flera s√§kerhetslager som skyddar systemet",
      layers: [
        "Database RLS policies (f√∂rsta f√∂rsvarslinjen)",
        "Application-level authorization (andra linjen)",
        "API/Edge function validation (tredje linjen)",
        "UI-level permission checks (fj√§rde linjen)"
      ]
    }
  },

  /**
   * üîí S√ÑKERHETSM√ñNSTER
   */
  security_patterns: {
    rls_policies: {
      description: "Row Level Security policies skyddar data p√• databas-niv√•",
      best_practices: [
        "Anv√§nd SECURITY DEFINER funktioner f√∂r rollkontroller",
        "F√∂rhindra rekursiva RLS-policies",
        "Testa policies med olika roller",
        "Logga s√§kerhetsrelevanta h√§ndelser"
      ],
      example_policy: `
        CREATE POLICY "Users can only view their own data"
        ON public.user_data
        FOR SELECT
        USING (auth.uid() = user_id);
        
        CREATE POLICY "Admins can view all data"  
        ON public.user_data
        FOR SELECT
        USING (public.is_admin(auth.uid()));
      `
    },
    
    role_functions: {
      description: "Centraliserade funktioner f√∂r rollkontroller",
      required_functions: [
        "has_role(user_id, role) - Kontrollerar specifik roll",
        "is_admin(user_id) - Kontrollerar admin-r√§ttigheter", 
        "is_superadmin(user_id) - Kontrollerar superadmin",
        "superadmin_god_mode(user_id) - Full √•tkomst f√∂r superadmin"
      ],
      implementation_pattern: `
        CREATE OR REPLACE FUNCTION public.has_role(_user_id UUID, _role app_role)
        RETURNS BOOLEAN
        LANGUAGE sql
        STABLE SECURITY DEFINER
        SET search_path = public
        AS $$
          SELECT EXISTS (
            SELECT 1 FROM public.user_roles 
            WHERE user_id = _user_id AND role = _role
          )
        $$;
      `
    }
  }
};

// ============= UTVECKLINGS BEST PRACTICES =============

export const DEVELOPMENT_BEST_PRACTICES = {
  
  /**
   * üöÄ PRE-DEVELOPMENT CHECKLIST
   */
  before_coding: [
    {
      task: "Definiera rollbaserad √•tkomst",
      description: "Vilka roller ska kunna anv√§nda funktionen?",
      action: "Uppdatera ROLE_MATRIX med nya permissions"
    },
    {
      task: "Planera datamodell", 
      description: "Hur ska data relatera till user_id?",
      action: "Skapa ER-diagram som visar user_id kopplingar"
    },
    {
      task: "Identifiera s√§kerhetsrisker",
      description: "Vilka √§r potentiella s√§kerhetsh√•l?", 
      action: "Genomf√∂r hot-modellering f√∂r funktionen"
    },
    {
      task: "Planera navigation",
      description: "Var ska funktionen vara tillg√§nglig?",
      action: "Uppdatera navigation.ts med rollfilter"
    }
  ],

  /**
   * üîß DURING DEVELOPMENT
   */
  coding_standards: {
    database_changes: [
      "Skapa ALLTID RLS policies f√∂r nya tabeller",
      "Anv√§nd user_id kolumn f√∂r anv√§ndarspecifik data",
      "Testa RLS policies med olika roller",
      "Dokumentera s√§kerhets√∂verv√§ganden"
    ],
    
    frontend_development: [
      "Anv√§nd UnifiedAuthProvider f√∂r rollkontroller",
      "Implementera loading states f√∂r auth",
      "D√∂lj UI-element som anv√§ndaren inte har √•tkomst till",
      "Visa informativa meddelanden vid beh√∂righetsproblem"
    ],
    
    api_development: [
      "Validera anv√§ndarbeh√∂righeter i varje endpoint", 
      "Anv√§nd Supabase client metoder (ej raw SQL)",
      "Logga s√§kerhetsrelevanta API-anrop",
      "Implementera rate limiting f√∂r k√§nsliga operationer"
    ]
  },

  /**
   * ‚úÖ POST-DEVELOPMENT VALIDATION
   */
  testing_checklist: [
    {
      category: "Rollbaserad testning",
      tests: [
        "Testa funktionen med varje roll (superadmin, admin, coach, client)",
        "Verifiera att data isoleras korrekt mellan roller",
        "Kontrollera att admin inte kan se superadmin-specifik data",
        "Testa att coach bara ser sina tilldelade klienter"
      ]
    },
    {
      category: "S√§kerhetstestning", 
      tests: [
        "F√∂rs√∂k komma √•t data som inte tillh√∂r anv√§ndaren",
        "Testa med ogiltig auth-token",
        "Kontrollera error handling f√∂r beh√∂righetsproblem",
        "Verifiera att k√§nslig data inte l√§cker i felmeddelanden"
      ]
    },
    {
      category: "Integration testing",
      tests: [
        "Testa navigation mellan sidor med olika roller",
        "Verifiera att betaOnly funktioner bara syns f√∂r Anna",
        "Kontrollera att dashboards renderar korrekt f√∂r varje roll",
        "Testa utloggning och inloggning med olika roller"
      ]
    }
  ]
};

// ============= ROLLOPTIMERING REKOMMENDATIONER =============

export const ROLE_OPTIMIZATION_ROADMAP = {
  
  /**
   * üéØ OMEDELBAR √ÖTG√ÑRDER (N√§sta sprint)
   */
  immediate_priorities: [
    {
      priority: "KRITISK",
      title: "Konsolidera 'user' rollen",
      description: "Migrera alla 'user' roller till 'client' f√∂r konsistens",
      implementation_steps: [
        "1. Identifiera alla anv√§ndare med 'user' roll",
        "2. Skapa migration script som uppdaterar till 'client'", 
        "3. Testa att alla funktioner fungerar med ny rollstruktur",
        "4. Ta bort 'user' fr√•n app_role enum"
      ],
      sql_migration: `
        -- Migrera user roll till client
        UPDATE user_roles 
        SET role = 'client' 
        WHERE role = 'user';
        
        -- Verifiera migration
        SELECT role, COUNT(*) FROM user_roles GROUP BY role;
      `,
      estimated_effort: "2-4 timmar"
    },
    
    {
      priority: "H√ñG",
      title: "F√∂rst√§rk coach-klient isolation",
      description: "S√§kerst√§ll att coaches bara kan se sina tilldelade klienter",
      implementation_steps: [
        "1. Uppdatera alla RLS policies som r√∂r klientdata",
        "2. L√§gg till coach_client_assignments validering",
        "3. Testa isolation mellan olika coaches",
        "4. Uppdatera frontend att anv√§nda coach-assignments"
      ],
      rls_policy_example: `
        CREATE POLICY "Coaches can only view assigned clients"
        ON public.profiles
        FOR SELECT
        USING (
          auth.uid() = id OR
          public.is_admin(auth.uid()) OR
          (
            public.has_role(auth.uid(), 'coach') AND
            EXISTS (
              SELECT 1 FROM coach_client_assignments cca
              WHERE cca.coach_id = auth.uid() 
                AND cca.client_id = profiles.id
                AND cca.is_active = true
            )
          )
        );
      `,
      estimated_effort: "4-8 timmar"
    },
    
    {
      priority: "MEDIUM",
      title: "Beta-funktioner kodstruktur",
      description: "F√∂rb√§ttra hur beta-funktioner hanteras i koden",
      implementation_steps: [
        "1. Skapa centraliserad beta-feature manager",
        "2. Ers√§tt hardkodad 'Anna Andersson' logik med flexibel betaUsers",
        "3. L√§gg till beta-feature toggles i databas",
        "4. Implementera UI f√∂r att hantera beta-anv√§ndare"
      ],
      estimated_effort: "3-6 timmar"
    }
  ],

  /**
   * üõ£Ô∏è L√ÖNGSIKTIGA F√ñRB√ÑTTRINGAR (N√§sta m√•nader)
   */
  long_term_improvements: [
    {
      title: "Dynamisk beh√∂righetsmatris",
      description: "Ers√§tt h√•rdkodad PERMISSIONS med databasdriven beh√∂righetsmatris",
      benefits: [
        "Flexibel beh√∂righetshantering utan kod√§ndringar",
        "Granul√§r kontroll √∂ver vad olika roller kan g√∂ra",
        "Auditloggar f√∂r beh√∂righets√§ndringar",
        "A/B testing av beh√∂righetsmodeller"
      ],
      implementation_approach: "Ny tabell: role_permissions med koppling till actions och resources"
    },
    
    {
      title: "Rollbaserad routing",
      description: "Automatisk routing baserat p√• anv√§ndarens prim√§ra roll",
      benefits: [
        "Smidigare anv√§ndarupplevelse",
        "Mindre f√∂rvirring om vilka sidor som √§r tillg√§ngliga", 
        "Automatisk omdirigering efter inloggning",
        "Rollspecifika landningssidor"
      ],
      implementation_approach: "Ut√∂ka React Router med role-based route guards"
    },
    
    {
      title: "Multi-tenant arkitektur",
      description: "St√∂d f√∂r flera organisationer med isolerad data",
      benefits: [
        "Skalbarhet f√∂r flera kunder",
        "B√§ttre dataisolering",
        "Organisation-specifika konfigurationer",
        "Separat billing per organisation"
      ],
      implementation_approach: "L√§gg till organization_id i alla relevanta tabeller + RLS policies"
    }
  ],

  /**
   * üìä SUCCESS METRICS
   */
  success_metrics: {
    security: [
      "Antal s√§kerhetsincidenter per m√•nad",
      "Tid fr√•n uppt√§ckt till fix av s√§kerhetsproblem",
      "Antal failed authorization attempts", 
      "Code coverage f√∂r s√§kerhetstester"
    ],
    usability: [
      "Antal support tickets relaterade till beh√∂righeter",
      "Anv√§ndartillfredsst√§llelse per roll",
      "Tid fr√•n registrering till produktiv anv√§ndning",
      "Antal anv√§ndarfel relaterade till rollf√∂rvirring"
    ],
    maintainability: [
      "Tid att implementera nya rollbaserade funktioner",
      "Antal buggar inf√∂rda vid rollf√∂r√§ndringar",
      "Code complexity metrics f√∂r auth-relaterad kod",
      "Utvecklartillfredsst√§llelse med auth-systemet"
    ]
  }
};

// ============= EMERGENCY PROCEDURES =============

export const EMERGENCY_PROCEDURES = {
  
  /**
   * üö® S√ÑKERHETSINCIDENT RESPONS
   */
  security_incident_response: {
    immediate_actions: [
      "1. Identifiera omfattningen av incidenten",
      "2. Isolera komprometterade konton",
      "3. Logga ut alla anv√§ndare om n√∂dv√§ndigt",
      "4. Backup av aktuell data innan √§ndringar",
      "5. Dokumentera alla √•tg√§rder i incident log"
    ],
    
    investigation_steps: [
      "1. Analysera admin_audit_log f√∂r onormal aktivitet",
      "2. Kontrollera user_roles f√∂r oauktoriserade rollf√∂r√§ndringar",
      "3. Granska RLS policy effektivitet",
      "4. Identifiera potentiella systems√•rbarheter",
      "5. Kommunicera med ber√∂rda anv√§ndare"
    ],
    
    recovery_procedures: [
      "1. √Öterst√§ll komprometterade konton",
      "2. Uppdatera s√§kerhetspolicies om n√∂dv√§ndigt",
      "3. St√§rk √∂vervakning av kritiska funktioner",
      "4. Genomf√∂r s√§kerhetsgenomg√•ng av kod",
      "5. Utbilda team om l√§rdomar fr√•n incidenten"
    ]
  },

  /**
   * üîß ROLLPROBLEM FELS√ñKNING
   */
  role_troubleshooting: {
    common_issues: {
      user_cant_access_feature: {
        diagnosis: [
          "Kontrollera user_roles tabellen f√∂r anv√§ndarens roller",
          "Verifiera att RLS policies till√•ter √•tkomst",
          "Kolla navigation.ts f√∂r r√§tt rollfilter",
          "Testa med superadmin f√∂r att isolera problemet"
        ],
        solutions: [
          "Tilldela r√§tt roll till anv√§ndaren",
          "Uppdatera RLS policy om den √§r f√∂r restriktiv",
          "L√§gg till roll i navigation konfiguration",
          "Kontrollera frontend beh√∂righetskontroller"
        ]
      },
      
      admin_cant_see_all_users: {
        diagnosis: [
          "Kontrollera is_admin() funktion",
          "Verifiera RLS policies p√• profiles tabellen",
          "Kolla coach_client_assignments f√∂r begr√§nsningar",
          "Testa med superadmin f√∂r j√§mf√∂relse"
        ],
        solutions: [
          "Uppdatera admin RLS policies",
          "Kontrollera att admin-roll √§r korrekt tilldelad",
          "S√§kerst√§ll att SECURITY DEFINER fungerar",
          "Rensa cache/session och testa igen"
        ]
      }
    }
  }
};

export default {
  ROLE_ARCHITECTURE_GUIDE,
  DEVELOPMENT_BEST_PRACTICES, 
  ROLE_OPTIMIZATION_ROADMAP,
  EMERGENCY_PROCEDURES
};