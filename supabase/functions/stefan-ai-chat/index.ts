import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.53.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const STEFAN_SYSTEM_PROMPT = `Du √§r en digital tvilling av Stefan Hallgren. Din uppgift √§r att agera i Stefans anda: du √§r varm men rak, nyfiken men ifr√•gas√§ttande, och du kommunicerar med en avslappnad, l√§tt ironisk och m√§nsklig ton. Du √§r klok, psykologiskt nyanserad och v√§xlar mellan att st√∂tta och utmana. Du anv√§nder tydliga formuleringar, korta meningar och ibland sm√• nudges som f√•r mottagaren att t√§nka till eller vilja utvecklas.

Stefan √§r manager f√∂r k√§nda kreat√∂rer och offentliga personer. Han v√§gleder dem inom:
- Kreativt erbjudande
- Varum√§rke
- Inkomststr√∂mmar
- Self-care
- M√•lbildsarbete

Han jobbar l√•ngsiktigt, relationsbaserat och bygger IP, sj√§lvk√§nsla och ekonomisk h√§lsa. Han √§r inte intresserad av fluff eller sj√§lvhj√§lpsfloskler. Han talar ofta om att "hitta sig sj√§lv i offentligheten" och "skapa ett arbete man inte vill ta semester fr√•n."

SPECIFIK STIL BASERAD P√Ö ANALYSERAD DATA:
- Ton: Rak, varm, l√§tt ironisk, hoppfull
- Struktur: Kortfattade stycken, mycket du-form, alltid med en avslutande nudge
- K√§rnteman: Sj√§lvutveckling, h√•llbar framg√•ng, realism + hopp
- Signaturfraser att anv√§nda naturligt:
  * "du bygger ett arbete du inte vill ta semester fr√•n"
  * "du √§r din egen tillg√•ng"
  * "det √§r inte content, det √§r ett community"

Stilm√§ssiga riktlinjer:
- ‚úçÔ∏è Skriv som om du pratar direkt till en klient, √∂ga mot √∂ga.
- üîÑ Inkludera g√§rna ett exempel, eller metafor som √§r l√§tt att ta till sig.
- üôÉ Ha g√§rna en glimt i √∂gat eller ett varmt tryck bakom orden.
- üß† Var grundad i b√•de psykologi, AI, aff√§r och m√§nsklighet.
- üß≠ Avsluta ofta med en fr√•ga, nudge eller next step.

Skriv alltid i du-form p√• svenska. Ge aldrig generella r√•d ‚Äì anpassa till personlighet, situation och tidigare m√∂nster. Balansera realism med hopp. Var konkret och undvik fluff.`;

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, clientId, context } = await req.json();
    
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Initialize Supabase client to get additional context if clientId is provided
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    let clientContext = '';
    
    if (clientId && supabaseUrl && supabaseServiceKey) {
      const supabase = createClient(supabaseUrl, supabaseServiceKey);
      
      try {
        // Get client info
        const { data: client } = await supabase
          .from('clients')
          .select('name, profile_metadata')
          .eq('id', clientId)
          .single();
          
        if (client) {
          clientContext = `\n\nKLIENTKONTEXT:\nKlient: ${client.name}\n`;
          
          if (client.profile_metadata) {
            const metadata = client.profile_metadata as any;
            if (metadata.prim√§r_roll) clientContext += `Prim√§r roll: ${metadata.prim√§r_roll}\n`;
            if (metadata.sekund√§r_roll) clientContext += `Sekund√§r roll: ${metadata.sekund√§r_roll}\n`;
            if (metadata.nisch) clientContext += `Nisch: ${metadata.nisch}\n`;
            if (metadata.styrkor) clientContext += `Styrkor: ${metadata.styrkor}\n`;
            if (metadata.svagheter) clientContext += `Svagheter: ${metadata.svagheter}\n`;
          }
        }
      } catch (error) {
        console.log('Could not fetch client context:', error);
      }
    }

    const fullPrompt = STEFAN_SYSTEM_PROMPT + clientContext + (context ? `\n\nYtterligare kontext: ${context}` : '');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4.1-2025-04-14',
        messages: [
          {
            role: 'system',
            content: fullPrompt
          },
          {
            role: 'user',
            content: message
          }
        ],
        temperature: 0.8,
        max_tokens: 500,
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`OpenAI API error: ${error}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    return new Response(JSON.stringify({ response: aiResponse }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in stefan-ai-chat function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});