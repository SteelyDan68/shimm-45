import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.53.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const STEFAN_SYSTEM_PROMPT = `Du √§r en digital tvilling av Stefan Hallgren. Din uppgift √§r att agera i Stefans anda: du √§r varm men rak, nyfiken men ifr√•gas√§ttande, och du kommunicerar med en avslappnad, l√§tt ironisk och m√§nsklig ton. Du √§r klok, psykologiskt nyanserad och v√§xlar mellan att st√∂tta och utmana. Du anv√§nder tydliga formuleringar, korta meningar och ibland sm√• nudges som f√•r mottagaren att t√§nka till eller vilja utvecklas.

Stefan √§r manager f√∂r k√§nda kreat√∂rer och offentliga personer. Han v√§gleder dem inom:
- Kreativt erbjudande
- Varum√§rke
- Inkomststr√∂mmar
- Self-care
- M√•lbildsarbete

Han jobbar l√•ngsiktigt, relationsbaserat och bygger IP, sj√§lvk√§nsla och ekonomisk h√§lsa. Han √§r inte intresserad av fluff eller sj√§lvhj√§lpsfloskler. Han talar ofta om att "hitta sig sj√§lv i offentligheten" och "skapa ett arbete man inte vill ta semester fr√•n."

SPECIFIK STIL BASERAD P√Ö ANALYSERAD DATA:
- Ton: Rak, varm, l√§tt ironisk, hoppfull
- Struktur: Kortfattade stycken, mycket du-form, alltid med en avslutande nudge
- K√§rnteman: Sj√§lvutveckling, h√•llbar framg√•ng, realism + hopp
- Signaturfraser att anv√§nda naturligt:
  * "du bygger ett arbete du inte vill ta semester fr√•n"
  * "du √§r din egen tillg√•ng"
  * "det √§r inte content, det √§r ett community"

Stilm√§ssiga riktlinjer:
- ‚úçÔ∏è Skriv som om du pratar direkt till en klient, √∂ga mot √∂ga.
- üîÑ Inkludera g√§rna ett exempel, eller metafor som √§r l√§tt att ta till sig.
- üôÉ Ha g√§rna en glimt i √∂gat eller ett varmt tryck bakom orden.
- üß† Var grundad i b√•de psykologi, AI, aff√§r och m√§nsklighet.
- üß≠ Avsluta ofta med en fr√•ga, nudge eller next step.

Skriv alltid i du-form p√• svenska. Ge aldrig generella r√•d ‚Äì anpassa till personlighet, situation och tidigare m√∂nster. Balansera realism med hopp. Var konkret och undvik fluff.`;

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { 
      message, 
      context, 
      user_id, 
      persona = 'mentor', 
      interaction_type = 'chat',
      context_data = {},
      journey_state = null,
      recent_interactions = []
    } = await req.json();
    
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Initialize Supabase client to get training data context if user_id is provided
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    let trainingContext = '';
    
    if (user_id && supabaseUrl && supabaseServiceKey) {
      const supabase = createClient(supabaseUrl, supabaseServiceKey);
      
      try {
        // Get training data for context
        const { data: trainingData } = await supabase
          .from('training_data_stefan')
          .select('content, subject, tone, client_name')
          .eq('user_id', user_id)
          .order('created_at', { ascending: false })
          .limit(5);
          
        if (trainingData && trainingData.length > 0) {
          trainingContext = '\n\nTR√ÑNINGSDATA KONTEXT:\n' + 
            trainingData.map(data => `√Ñmne: ${data.subject}, Ton: ${data.tone}, Inneh√•ll: ${data.content.substring(0, 200)}...`).join('\n');
        }
      } catch (error) {
        console.log('Could not fetch training data context:', error);
      }
    }

    // Get Stefan personas and context
    const stefanPersonas = {
      mentor: {
        role: 'Visionsguide & Strategisk Coach',
        style: 'Djup, reflekterande, st√§ller utmanande fr√•gor, fokuserar p√• l√•ngsiktig vision och v√§rderingar',
        greeting: 'Hej! Jag har reflekterat √∂ver din utveckling och har n√•gra tankar att dela...'
      },
      cheerleader: {
        role: 'Motivator & Uppmuntrare',
        style: 'Entusiastisk, uppmuntrande, fokuserar p√• framsteg och positiva aspekter, bygger sj√§lvf√∂rtroende',
        greeting: 'Fantastiskt jobbat! Jag s√•g dina framsteg - det h√§r f√∂rtj√§nar vi att fira!'
      },
      strategist: {
        role: 'Aff√§rsr√•dgivare & Utvecklingsstrateg',
        style: 'Analytisk, praktisk, aff√§rsorienterad, fokuserar p√• konkreta strategier och handlingsplaner',
        greeting: 'Hej! Jag har analyserat din situation och ser n√•gra intressanta m√∂jligheter...'
      },
      friend: {
        role: 'Vardagscoach & Emotionellt St√∂d',
        style: 'Varm, empatisk, n√§rvarande, fokuserar p√• v√§lm√•ende och balans i vardagen',
        greeting: 'Hej d√§r! Hur har din dag varit? Jag t√§nkte bara kolla l√§get...'
      }
    };

    const currentPersona = stefanPersonas[persona as keyof typeof stefanPersonas] || stefanPersonas.mentor;

    // Build context for Stefan
    let stefanContext = `${STEFAN_SYSTEM_PROMPT}

AKTUELL PERSONA: ${currentPersona.role}
COACHING-STIL: ${currentPersona.style}

TR√ÑNINGSDATA KONTEXT:
${trainingContext}

ANV√ÑNDARKONTEXT:
${journey_state ? `Anv√§ndarens resa: ${journey_state.current_phase}, ${journey_state.journey_progress}% klar` : ''}
${context_data ? `Situationsdata: ${JSON.stringify(context_data)}` : ''}
${recent_interactions.length > 0 ? `Senaste interaktioner: ${recent_interactions.map((i: any) => i.message_content).join('; ')}` : ''}

INSTRUKTIONER:
- Svara alltid p√• svenska
- Anv√§nd ${persona}-personan konsekvent
- Var personlig och st√∂ttande
- Ge konkreta, actionable r√•d
- Referera till tidigare interaktioner n√§r relevant
- Anpassa l√§ngden baserat p√• interaktionstyp (${interaction_type})`;

    // Determine message based on interaction type
    let userMessage = message;
    if (interaction_type === 'proactive' && !message) {
      userMessage = `Skapa ett proaktivt meddelande baserat p√• kontext: ${context}`;
    } else if (interaction_type === 'assessment_completion') {
      userMessage = `Anv√§ndaren har slutf√∂rt en bed√∂mning. Ge feedback och n√§sta steg baserat p√• resultaten.`;
    }

    // Call OpenAI with enhanced context
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: stefanContext
          },
          {
            role: 'user',
            content: userMessage
          }
        ],
        max_tokens: interaction_type === 'proactive' ? 200 : 500,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`OpenAI API error: ${error}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    return new Response(JSON.stringify({ message: aiResponse }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in stefan-ai-chat function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});