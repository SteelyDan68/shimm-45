import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';
import { Resend } from "npm:resend@4.0.0";

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

interface SendInvitationRequest {
  email: string;
  role: string;
  invitedBy?: string;
  custom_message?: string;
  expires_in_days?: number;
}

const handler = async (req: Request): Promise<Response> => {
  console.log('Send invitation request received');

  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const { 
      email, 
      role, 
      invitedBy = 'Administratör',
      custom_message = '',
      expires_in_days = 7 
    }: SendInvitationRequest = await req.json();
    
    console.log(`Sending invitation to ${email} for role ${role}`);

    if (!email) {
      throw new Error('E-postadress krävs');
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      throw new Error(`Ogiltig e-postadress: ${email}`);
    }

    // Check if invitation already exists
    const { data: existingInvitation } = await supabaseClient
      .from('invitations')
      .select('id, token, status')
      .eq('email', email)
      .eq('status', 'pending')
      .maybeSingle();

    let invitation;
    
    if (existingInvitation) {
      console.log(`Found existing invitation for ${email}, using it`);
      invitation = existingInvitation;
    } else {
      console.log(`Creating new invitation for ${email}`);
      
      // Calculate expiry date
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + expires_in_days);
      
      // Create new invitation with service role key
      const { data: newInvitation, error: createError } = await supabaseClient
        .from('invitations')
        .insert({
          email,
          invited_role: role,
          invited_by: '9065f42b-b9cc-4252-b73f-4374c6286b5e', // Admin user ID
          expires_at: expiresAt.toISOString(),
          token: '', // Will be generated by trigger
        })
        .select('id, token')
        .single();

      if (createError) {
        console.error(`Error creating invitation for ${email}:`, createError);
        throw new Error(`Kunde inte skapa inbjudan: ${createError.message}`);
      }
      
      invitation = newInvitation;
    }

    if (!invitation?.token) {
      console.error(`No token found on invitation for ${email}:`, invitation);
      throw new Error(`Inbjudan saknar token`);
    }

    const appUrl = 'https://00a0d53e-45e2-45a5-8d70-ae3e74d84396.lovableproject.com';

    // Simple HTML email (no React Email dependency issues)
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #f8f9fa; padding: 20px; text-align: center; }
          .content { padding: 20px; }
          .button { display: inline-block; padding: 12px 24px; background: #007bff; color: white; text-decoration: none; border-radius: 4px; margin: 20px 0; }
          .footer { background: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>Inbjudan till plattformen</h1>
          </div>
          <div class="content">
            <p>Hej!</p>
            <p>Du har blivit inbjuden av ${invitedBy} att gå med i plattformen som ${role === 'client' ? 'klient' : role === 'admin' ? 'administratör' : 'användare'}.</p>
            ${custom_message ? `<p><strong>Meddelande:</strong> ${custom_message}</p>` : ''}
            <p>Klicka på knappen nedan för att acceptera inbjudan och skapa ditt konto:</p>
            <a href="${appUrl}/invitation-signup?token=${invitation.token}" class="button">Acceptera inbjudan</a>
            <p>Om knappen inte fungerar, kopiera och klistra in följande länk i din webbläsare:</p>
            <p>${appUrl}/invitation-signup?token=${invitation.token}</p>
          </div>
          <div class="footer">
            <p>Denna inbjudan är giltig i ${expires_in_days} dagar.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    // Send the email
    const emailResponse = await resend.emails.send({
      from: "Plattformen <onboarding@resend.dev>",
      to: [email],
      subject: `Inbjudan till plattformen`,
      html,
    });

    if (emailResponse.error) {
      console.error(`Resend error for ${email}:`, emailResponse.error);
      
      // Check if this is API key issue, domain verification, or development restriction
      if (emailResponse.error.message?.includes('API key is invalid') ||
          emailResponse.error.message?.includes('testing emails') || 
          emailResponse.error.message?.includes('verify a domain') ||
          emailResponse.error.message?.includes('own email address')) {
        
        console.log(`Development mode for ${email}: Invitation created but email restricted`);
        
        return new Response(JSON.stringify({
          success: true,
          message: 'Inbjudan skapad (development mode)',
          invitation_id: invitation.id,
          invitation_token: invitation.token,
          invitation_url: `${appUrl}/invitation-signup?token=${invitation.token}`,
          dev_mode: true,
          note: 'För att skicka emails: Konfigurera RESEND_API_KEY och verifiera en domän på resend.com'
        }), {
          status: 200,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        });
      } else {
        throw new Error(`Kunde inte skicka email: ${emailResponse.error.message}`);
      }
    }

    console.log(`Invitation email sent successfully to ${email}:`, emailResponse);
    
    return new Response(JSON.stringify({
      success: true,
      message: 'Inbjudan skickad framgångsrikt',
      invitation_id: invitation.id,
      email_id: emailResponse.data?.id
    }), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        ...corsHeaders,
      },
    });

  } catch (error: any) {
    console.error("Error in send-invitation function:", error);
    return new Response(
      JSON.stringify({ 
        error: error.message || "Ett fel uppstod vid skickandet av inbjudan"
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);