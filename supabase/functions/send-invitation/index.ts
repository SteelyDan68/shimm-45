import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';
import { Resend } from "npm:resend@4.0.0";
import { renderAsync } from 'npm:@react-email/components@0.0.22';
import React from 'npm:react@18.3.1';
import { InvitationEmail } from './_templates/invitation-email.tsx';

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

interface SendInvitationRequest {
  email: string;
  role: string;
  invitedBy: string;
}

const handler = async (req: Request): Promise<Response> => {
  console.log('Send invitation request received');

  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const { email, role, invitedBy }: SendInvitationRequest = await req.json();
    console.log(`Sending invitation to ${email} for role ${role} from ${invitedBy}`);

    // Check if invitation already exists
    const { data: existingInvitation } = await supabaseClient
      .from('invitations')
      .select('id, token, status')
      .eq('email', email)
      .eq('status', 'pending')
      .maybeSingle();

    let invitation;
    
    if (existingInvitation) {
      console.log('Found existing invitation, using it');
      invitation = existingInvitation;
    } else {
      console.log('Creating new invitation');
      // Create new invitation with service role key
      const { data: newInvitation, error: createError } = await supabaseClient
        .from('invitations')
        .insert({
          email,
          invited_role: role,
          invited_by: '9065f42b-b9cc-4252-b73f-4374c6286b5e', // Your user ID for now
          token: '', // Will be generated by trigger
        })
        .select('id, token')
        .single();

      if (createError) {
        console.error('Error creating invitation:', createError);
        throw new Error(`Kunde inte skapa inbjudan: ${createError.message}`);
      }
      
      invitation = newInvitation;
    }

    if (!invitation?.token) {
      console.error('No token found on invitation:', invitation);
      throw new Error('Inbjudan saknar token');
    }

    const appUrl = 'https://00a0d53e-45e2-45a5-8d70-ae3e74d84396.lovableproject.com';

    // Render the email template
    const html = await renderAsync(
      React.createElement(InvitationEmail, {
        invitedBy,
        invitationToken: invitation.token,
        role: role === 'client' ? 'klient' : role === 'admin' ? 'administratör' : 'användare',
        appUrl,
      })
    );

    // Send the email
    const emailResponse = await resend.emails.send({
      from: "Plattformen <onboarding@resend.dev>",
      to: [email],
      subject: `Inbjudan till plattformen från ${invitedBy}`,
      html,
    });

    if (emailResponse.error) {
      console.error('Resend error:', emailResponse.error);
      
      // Check if this is API key issue, domain verification, or development restriction
      if (emailResponse.error.message?.includes('API key is invalid') ||
          emailResponse.error.message?.includes('testing emails') || 
          emailResponse.error.message?.includes('verify a domain') ||
          emailResponse.error.message?.includes('own email address')) {
        
        console.log('Development mode: Invitation created but email restricted');
        
        return new Response(JSON.stringify({ 
          success: true, 
          message: `Inbjudan skapad! Email kunde inte skickas (${emailResponse.error.message}). Använd denna länk: ${appUrl}/invitation-signup?token=${invitation.token}`,
          invitation_id: invitation.id,
          invitation_token: invitation.token,
          invitation_url: `${appUrl}/invitation-signup?token=${invitation.token}`,
          dev_mode: true,
          note: 'För att skicka emails: Konfigurera RESEND_API_KEY och verifiera en domän på resend.com'
        }), {
          status: 200,
          headers: {
            "Content-Type": "application/json",
            ...corsHeaders,
          },
        });
      }
      
      throw new Error(`Failed to send email: ${emailResponse.error.message}`);
    }

    console.log("Invitation email sent successfully:", emailResponse);

    return new Response(JSON.stringify({ 
      success: true, 
      message: "Inbjudan skickad via e-post",
      emailId: emailResponse.data?.id 
    }), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        ...corsHeaders,
      },
    });
  } catch (error: any) {
    console.error("Error in send-invitation function:", error);
    return new Response(
      JSON.stringify({ 
        error: error.message || "Ett fel uppstod vid skickandet av inbjudan"
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);