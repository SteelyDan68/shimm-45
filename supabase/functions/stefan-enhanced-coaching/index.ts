import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { aiService } from '../_shared/ai-service.ts';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Stefan's Enhanced Coaching Model Selector (for Edge Function)
class StefanCoachingEngine {
  static selectCoachingModel(userInput: string, context: any = {}) {
    const input = userInput.toLowerCase();
    
    // Neuroplastisk metod - f√∂r vanor och beteendef√∂r√§ndring
    if (input.match(/(vana|habit|sluta|quit|beroende|addiction|routine|rutin|snusa|r√∂ka|dricka|tr√§na|motion|sova|√§ta|diet)/)) {
      return {
        id: 'neuroplastic',
        name: 'Neuroplastisk Metod',
        approach: 'Fokuserar p√• hj√§rnans f√∂rm√•ga att f√∂r√§ndras genom repetition och sm√•, konsekventa steg',
        stefanTouch: 'Stefan guidar dig genom att skapa nya neurala banor med empati och f√∂rst√•else f√∂r att f√∂r√§ndring tar tid.'
      };
    }
    
    // Livets hjul - f√∂r balans och holistisk utveckling
    if (input.match(/(balans|balance|liv|life|omr√•den|helhetsvy|holistic|work-life|v√§lm√•ende|wellbeing|harmoni|j√§mvikt)/)) {
      return {
        id: 'wheel_of_life',
        name: 'Livets Hjul', 
        approach: 'Holistisk approach f√∂r att skapa balans mellan alla viktiga livsomr√•den',
        stefanTouch: 'Stefan hj√§lper dig se helhetsbilden och hitta harmoni mellan olika delar av ditt liv.'
      };
    }
    
    // Styrkebaserad coaching - f√∂r talang och potential
    if (input.match(/(styrka|strengths|talang|talent|beg√•vning|potential|naturlig|bra p√•|excellent|kompetens|skicklighet)/)) {
      return {
        id: 'strengths_based',
        name: 'Styrkebaserad Coaching',
        approach: 'Bygger p√• och utvecklar dina naturliga talanger och styrkor',
        stefanTouch: 'Stefan identifierar din unika potential och guidar dig att maximera dina naturliga g√•vor.'
      };
    }
    
    // KBT-inspirerad - f√∂r tankar, k√§nslor och stress
    if (input.match(/(tankar|thoughts|k√§nslor|emotions|oro|anxiety|stress|negativ|negative|sj√§lvkritik|perfectionism)/)) {
      return {
        id: 'cognitive_behavioral',
        name: 'Kognitiv-Empatisk Metod',
        approach: 'Fokuserar p√• sambandet mellan tankar, k√§nslor och beteenden med empati och f√∂rst√•else',
        stefanTouch: 'Stefan hj√§lper dig f√∂rst√• dina tankem√∂nster och utveckla h√§lsosamma s√§tt att hantera utmaningar.'
      };
    }
    
    // L√∂sningsfokuserad - f√∂r m√•l och framtid
    if (input.match(/(l√∂sning|solution|framtid|future|m√•l|goal|vision|m√∂jligheter|opportunities|potential|framg√•ng)/)) {
      return {
        id: 'solution_focused',
        name: 'L√∂sningsfokuserad Coaching',
        approach: 'Fokuserar p√• l√∂sningar och bygger p√• dina resurser och tidigare framg√•ngar',
        stefanTouch: 'Stefan guidar dig att bygga p√• det som redan fungerar och skapa tydliga v√§gar fram√•t.'
      };
    }
    
    // Mindfulness-baserad - f√∂r n√§rvaro och inre lugn
    if (input.match(/(mindfulness|meditation|n√§rvarande|present|medvetenhet|awareness|acceptans|acceptance|stillhet|lugn)/)) {
      return {
        id: 'mindfulness',
        name: 'Mindfulness-baserad Coaching',
        approach: 'Utvecklar n√§rvarande medvetenhet och inre balance',
        stefanTouch: 'Stefan leder dig till djupare sj√§lvk√§nnedom genom medveten n√§rvaro och acceptans.'
      };
    }
    
    // Default - Stefans adaptiva metod
    return {
      id: 'adaptive_ai',
      name: 'Stefans Adaptiva Coaching',
      approach: 'Stefan kombinerar flera coachingmetoder baserat p√• dina specifika behov och situation',
      stefanTouch: 'Stefan anpassar sin coaching dynamiskt f√∂r att ge dig exakt den typ av st√∂d du beh√∂ver just nu.'
    };
  }
  
  static buildStefanSystemPrompt(selectedModel: any, context: any = {}) {
    return `üé≠ DU √ÑR STEFAN - EXPERT AI-COACH MED DJUP M√ÑNSKLIG F√ñRST√ÖELSE

STEFANS K√ÑRNIDENTITET:
‚Ä¢ Varm, empatisk men tydlig personlighet
‚Ä¢ Praktisk visdom kombinerat med djup f√∂rst√•else f√∂r m√§nsklig psykologi  
‚Ä¢ H√∂g emotionell intelligens som l√§ser mellan raderna
‚Ä¢ Autentisk omsorg f√∂r varje klients unika utvecklingsresa
‚Ä¢ Anv√§nder "du" och personlig, varm ton

STEFANS GRUNDL√ÑGGANDE COACHING-PRINCIPER:
‚Ä¢ Varje m√§nniska har unik potential som kan utvecklas
‚Ä¢ Sm√•, konsekventa steg skapar best√•ende f√∂r√§ndring (neuroplasticitet)
‚Ä¢ Sj√§lvk√§nnedom √§r grunden f√∂r all personlig utveckling  
‚Ä¢ Balans √§r nyckeln till h√•llbar tillv√§xt
‚Ä¢ Motst√•nd √§r ofta r√§dsla f√∂rkl√§dd - bem√∂t det med empati
‚Ä¢ Fira framsteg, oavsett hur sm√• de √§r
‚Ä¢ Autenticitet √∂ver perfektion alltid

üéØ VALD COACHINGMODELL F√ñR DETTA SAMTAL:
${selectedModel.name}
APPROACH: ${selectedModel.approach}
STEFANS TOUCH: ${selectedModel.stefanTouch}

STEFANS KOMMUNIKATIONSSTIL:
‚úì Personlig, varm ton som skapar trygghet
‚úì Lyssnar aktivt och l√§ser mellan raderna  
‚úì St√§ller kraftfulla, insiktsfulla fr√•gor
‚úì Ger konkreta, genomf√∂rbara r√•d
‚úì Balanserar empati med utmaning
‚úì Anv√§nder ber√§ttelser och metaforer n√§r det hj√§lper
‚úì Erk√§nner komplexitet utan att √∂verv√§ldigande

STEFANS EXPERTOMR√ÖDEN:
‚Ä¢ Neuroplasticitet och beteendef√∂r√§ndring
‚Ä¢ Positiv psykologi och styrkebaserat t√§nkande
‚Ä¢ Mindfulness och medveten n√§rvaro
‚Ä¢ Emotionell intelligens och sj√§lvk√§nnedom
‚Ä¢ Stresshantering och v√§lm√•ende
‚Ä¢ M√•ls√§ttning och motivation
‚Ä¢ Kreativitet och probleml√∂sning

${context.userHistory ? `
KLIENTENS HISTORIK (Stefan kommer ih√•g):
${context.userHistory.slice(-3).join('\n')}` : ''}

${context.currentChallenges ? `
AKTUELLA UTMANINGAR:
${context.currentChallenges.join(', ')}` : ''}

STEFANS MISSION:
Ge personlig, empatisk coaching som m√∂ter personen exakt d√§r hen √§r och guidar fram√•t med visdom, v√§rme och praktisk v√§gledning.

VIKTIGT: Stefan √§r aldrig generisk - varje svar √§r anpassat till denna specifika persons resa, utmaningar och potential.`;
  }
  
  static buildStefanUserPrompt(userInput: string, context: any = {}) {
    return `COACHING-SAMTAL MED STEFAN

KLIENTENS MEDDELANDE:
"${userInput}"

${context.assessmentData ? `
RELEVANT KONTEXT FR√ÖN ASSESSMENTS:
${JSON.stringify(context.assessmentData, null, 2)}` : ''}

${context.pillarType ? `
AKTUELL UTVECKLINGSOMR√ÖDE: ${context.pillarType}` : ''}

STEFANS UPPGIFT:
Svara som den erfarna, empatiska coach du √§r. Ge:

1. PERSONLIG RESPONS - Visa att du f√∂rst√•r och bryr dig
2. INSIKTSFULL REFLEKTION - Hj√§lp klienten se nya perspektiv
3. KONKRETA N√ÑSTA STEG - Vad kan hen g√∂ra praktiskt?
4. UPPMUNTRAN - Bygg sj√§lvf√∂rtroende och motivation
5. KRAFTFULLA FR√ÖGOR - Om det hj√§lper klienten vidare

Anpassa ditt svar till den valda coachingmodellen men l√•t din Stefans-personlighet genomsyra allt.

Svara med v√§rme, visdom och √§kta omsorg f√∂r denna persons utveckling.`;
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { 
      user_id,
      message,
      context,
      session_type = 'general_coaching'
    } = await req.json();

    if (!user_id || !message) {
      throw new Error('Missing required fields: user_id, message');
    }

    console.log('üé≠ Stefan Enhanced Coaching for user:', user_id);
    console.log('üí¨ Message:', message.substring(0, 100) + '...');
    
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // H√§mta anv√§ndarens kontext fr√•n senaste interaktioner
    const { data: userContext } = await supabase
      .from('path_entries')
      .select('title, details, metadata')
      .eq('user_id', user_id)
      .order('created_at', { ascending: false })
      .limit(3);

    // H√§mta senaste assessments f√∂r kontext
    const { data: recentAssessments } = await supabase
      .from('assessment_rounds')
      .select('pillar_type, ai_analysis, scores')
      .eq('user_id', user_id)
      .order('created_at', { ascending: false })
      .limit(2);

    // Bygg omfattande kontext f√∂r Stefan
    const enhancedContext = {
      userHistory: userContext?.map(entry => `${entry.title}: ${entry.details?.substring(0, 200)}`),
      assessmentData: recentAssessments,
      pillarType: context?.pillar_type,
      currentChallenges: context?.challenges || [],
      sessionType: session_type,
      userPreferences: context?.preferences || {}
    };

    // üéØ V√ÑLJ COACHINGMODELL DYNAMISKT
    const selectedModel = StefanCoachingEngine.selectCoachingModel(message, enhancedContext);
    
    console.log('üéØ Selected coaching model:', selectedModel.name);

    // üé≠ BYGG STEFAN'S PERSONLIGA PROMPT SYSTEM
    const systemPrompt = StefanCoachingEngine.buildStefanSystemPrompt(selectedModel, enhancedContext);
    const userPrompt = StefanCoachingEngine.buildStefanUserPrompt(message, enhancedContext);

    // ü§ñ ANROPA AI MED STEFAN'S PERSONLIGHET
    const availability = await aiService.checkAvailability();
    if (!availability.openai && !availability.gemini) {
      throw new Error('Inga AI-tj√§nster tillg√§ngliga');
    }

    const aiResponse = await aiService.generateResponse([
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ], {
      maxTokens: 1200,
      temperature: 0.8, // H√∂gre f√∂r mer personlighet och kreativitet
      model: 'gpt-4.1-2025-04-14' // Anv√§nd senaste modellen f√∂r b√§sta f√∂rst√•else
    });

    if (!aiResponse.success) {
      throw new Error('Stefan AI misslyckades: ' + aiResponse.error);
    }

    const stefanResponse = aiResponse.content;

    // üìù SPARA INTERAKTION F√ñR KONTINUITET
    await supabase.from('path_entries').insert({
      user_id: user_id,
      created_by: user_id,
      type: 'coaching_interaction',
      title: `Stefan Coaching: ${selectedModel.name}`,
      details: `MEDDELANDE: ${message}\n\nSTEFANS SVAR: ${stefanResponse}`,
      ai_generated: true,
      metadata: {
        coaching_model: selectedModel.id,
        session_type: session_type,
        model_reasoning: selectedModel.stefanTouch,
        empathy_level: 'high',
        personalization: 'maximum'
      }
    });

    // üìä LOGGA COACHING ANALYTICS
    await supabase.from('coaching_analytics').insert({
      user_id: user_id,
      metric_type: 'stefan_coaching_interaction',
      metric_value: 1,
      metric_data: {
        coaching_model: selectedModel.id,
        message_length: message.length,
        response_length: stefanResponse.length,
        session_type: session_type,
        ai_model_used: aiResponse.model,
        context_richness: Object.keys(enhancedContext).length
      }
    });

    console.log('‚úÖ Stefan coaching completed successfully');

    return new Response(JSON.stringify({
      success: true,
      response: stefanResponse,
      coaching_model: {
        id: selectedModel.id,
        name: selectedModel.name,
        approach: selectedModel.approach,
        stefan_touch: selectedModel.stefanTouch
      },
      context: {
        empathy_level: 'high',
        personalization: 'maximum',
        adaptive_model: true
      },
      meta: {
        ai_model: aiResponse.model,
        timestamp: new Date().toISOString(),
        session_type: session_type
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Stefan Enhanced Coaching Error:', error);
    return new Response(JSON.stringify({ 
      success: false,
      error: error.message,
      fallback_message: 'Stefan √§r tillf√§lligt otillg√§nglig. F√∂rs√∂k igen om en stund.'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});