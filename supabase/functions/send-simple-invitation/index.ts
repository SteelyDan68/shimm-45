import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';
import { Resend } from "npm:resend@4.0.0";

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface SimpleInvitationRequest {
  email: string;
  role: string;
  custom_message?: string;
}

const handler = async (req: Request): Promise<Response> => {
  console.log('üöÄ Simple invitation request received');

  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üìù Parsing request body...');
    const { email, role, custom_message = '' }: SimpleInvitationRequest = await req.json();
    
    console.log(`üìß Processing invitation for: ${email} with role: ${role}`);

    // Initialize Supabase client
    console.log('üîß Initializing Supabase client...');
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Check if RESEND_API_KEY exists
    const resendKey = Deno.env.get("RESEND_API_KEY");
    console.log(`üîë RESEND_API_KEY status: ${resendKey ? 'FOUND' : 'MISSING'}`);
    
    if (!resendKey) {
      throw new Error('RESEND_API_KEY is not configured');
    }

    // Simple email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      throw new Error(`Invalid email format: ${email}`);
    }

    console.log('‚úÖ Email validation passed');

    // Check for existing invitation
    console.log('üîç Checking for existing invitation...');
    const { data: existingInvitation, error: checkError } = await supabaseClient
      .from('invitations')
      .select('id, token, status')
      .eq('email', email)
      .eq('status', 'pending')
      .maybeSingle();

    if (checkError) {
      console.error('‚ùå Database check error:', checkError);
      throw new Error(`Database error: ${checkError.message}`);
    }

    let invitation;
    
    if (existingInvitation) {
      console.log(`‚ôªÔ∏è Using existing invitation for ${email}`);
      invitation = existingInvitation;
    } else {
      console.log(`üÜï Creating new invitation for ${email}`);
      
      // Calculate expiry date
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 7);
      
      // Create new invitation
      const { data: newInvitation, error: createError } = await supabaseClient
        .from('invitations')
        .insert({
          email,
          invited_role: role,
          invited_by: '9065f42b-b9cc-4252-b73f-4374c6286b5e', // Admin user ID
          expires_at: expiresAt.toISOString(),
          token: '', // Will be generated by trigger
        })
        .select('id, token')
        .single();

      if (createError) {
        console.error('‚ùå Database create error:', createError);
        throw new Error(`Failed to create invitation: ${createError.message}`);
      }
      
      invitation = newInvitation;
    }

    if (!invitation?.token) {
      console.error('‚ùå No token found on invitation:', invitation);
      throw new Error('Invitation missing token');
    }

    console.log(`‚úÖ Invitation ready with token: ${invitation.token.substring(0, 8)}...`);

    const appUrl = 'https://00a0d53e-45e2-45a5-8d70-ae3e74d84396.lovableproject.com';
    const invitationUrl = `${appUrl}/invitation-signup?token=${invitation.token}`;

    // Create simple HTML email
    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>Inbjudan till plattformen</title>
        </head>
        <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <h1 style="color: #333;">V√§lkommen till plattformen!</h1>
          <p>Du har blivit inbjuden att g√• med i v√•r plattform som <strong>${role === 'client' ? 'klient' : role}</strong>.</p>
          ${custom_message ? `<p><strong>Meddelande:</strong> ${custom_message}</p>` : ''}
          <p>
            <a href="${invitationUrl}" style="background: #007bff; color: white; text-decoration: none; padding: 12px 24px; border-radius: 4px; display: inline-block;">
              Acceptera inbjudan
            </a>
          </p>
          <p>Om knappen inte fungerar, kopiera denna l√§nk: ${invitationUrl}</p>
        </body>
      </html>
    `;

    console.log('üì® Sending email via Resend...');

    // Send the email
    const emailResponse = await resend.emails.send({
      from: "HappyMinds <noreply@shimms.com>", // Use your verified domain
      to: [email],
      subject: "Inbjudan till HappyMinds plattformen",
      html,
    });

    console.log('üì® Resend response:', JSON.stringify(emailResponse, null, 2));

    if (emailResponse.error) {
      console.error('‚ùå Resend error details:', {
        error: emailResponse.error,
        errorType: typeof emailResponse.error,
        errorMessage: emailResponse.error?.message || 'No message',
        errorName: emailResponse.error?.name || 'No name'
      });
      
      // Handle development restrictions
      if (emailResponse.error.message?.includes('testing emails') || 
          emailResponse.error.message?.includes('verify a domain') ||
          emailResponse.error.message?.includes('own email address')) {
        
        console.log('üß™ Development mode detected - invitation created but email restricted');
        
        return new Response(JSON.stringify({ 
          success: true,
          message: `Inbjudan skapad f√∂r ${email}`,
          dev_mode: true,
          invitation_url: invitationUrl,
          note: 'E-post kunde inte skickas i utvecklingsl√§ge. Verifiera dom√§n p√• resend.com'
        }), {
          status: 200,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        });
      } else {
        throw new Error(`Email sending failed: ${emailResponse.error?.message || emailResponse.error?.toString() || 'Unknown Resend error'}`);
      }
    }

    console.log('‚úÖ Email sent successfully');

    return new Response(JSON.stringify({ 
      success: true,
      message: `Inbjudan skickad till ${email}`,
      invitation_id: invitation.id,
      email_id: emailResponse.data?.id
    }), {
      status: 200,
      headers: { "Content-Type": "application/json", ...corsHeaders },
    });

  } catch (error: any) {
    console.error("üí• Critical error in send-simple-invitation:", error);
    console.error("üí• Error type:", typeof error);
    console.error("üí• Error details:", {
      message: error?.message || 'No message',
      name: error?.name || 'No name',
      stack: error?.stack || 'No stack'
    });
    
    return new Response(
      JSON.stringify({ 
        error: error?.message || error?.toString() || "Ett fel uppstod vid skickandet av inbjudan"
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);